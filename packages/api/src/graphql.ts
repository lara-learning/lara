import { GraphQLResolveInfo } from 'graphql';
import { CommentableInterface, Comment, Entry, Day, Report, Trainer, Trainee, UserInterface, Paper } from './models';
import { Context } from './context';
export type Maybe<T> = T | undefined;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type GqlAdmin = GqlUserInterface & {
  __typename?: 'Admin';
  avatar: Scalars['String'];
  createdAt: Scalars['String'];
  firstName: Scalars['String'];
  id: Scalars['ID'];
  language?: Maybe<Scalars['String']>;
  lastName: Scalars['String'];
  notification?: Maybe<Scalars['Boolean']>;
  theme?: Maybe<Scalars['String']>;
  type: GqlUserTypeEnum;
  username: Scalars['String'];
  email: Scalars['String'];
  signature?: Maybe<Scalars['String']>;
  alexaSkillLinked?: Maybe<Scalars['Boolean']>;
};

export type GqlAnswerPaperInput = {
  id: Scalars['ID'];
  questionId: Scalars['ID'];
  answer: Scalars['String'];
};

export type GqlComment = {
  __typename?: 'Comment';
  createdAt: Scalars['String'];
  id: Scalars['ID'];
  text?: Maybe<Scalars['String']>;
  user: GqlUserInterface;
};

/** An object that can have comments */
export type GqlCommentableInterface = {
  comments: Array<GqlComment>;
  id: Scalars['ID'];
};

export type GqlCompany = {
  __typename?: 'Company';
  id: Scalars['String'];
  logo: Scalars['String'];
  name: Scalars['String'];
};

export type GqlCreateCommentPayload = {
  __typename?: 'CreateCommentPayload';
  comment: GqlComment;
  commentable: GqlCommentableInterface;
};

export type GqlCreateTraineeInput = {
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  email: Scalars['String'];
  startDate: Scalars['String'];
  endDate: Scalars['String'];
  startOfToolUsage: Scalars['String'];
  companyId: Scalars['String'];
};

export type GqlCreateTrainerInput = {
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
};

export type GqlDay = GqlCommentableInterface & {
  __typename?: 'Day';
  comments: Array<GqlComment>;
  createdAt: Scalars['String'];
  date: Scalars['String'];
  entries: Array<GqlEntry>;
  id: Scalars['ID'];
  status?: Maybe<GqlDayStatusEnum>;
};

export type GqlDayStatusEnum =
  /** workday */
  | 'work'
  /** vacation */
  | 'vacation'
  /** sick leave */
  | 'sick'
  /** school/university */
  | 'education'
  /** public holiday */
  | 'holiday';

/** Autogenerated return type of DevSetUser */
export type GqlDevSetUserPayload = {
  __typename?: 'DevSetUserPayload';
  user?: Maybe<GqlUserInterface>;
};

export type GqlEntry = GqlCommentableInterface & {
  __typename?: 'Entry';
  comments: Array<GqlComment>;
  createdAt: Scalars['String'];
  id: Scalars['ID'];
  orderId: Scalars['Int'];
  text: Scalars['String'];
  time: Scalars['Int'];
};

export type GqlEntryInput = {
  text: Scalars['String'];
  time: Scalars['Int'];
};

export type GqlLaraConfig = {
  __typename?: 'LaraConfig';
  minWorkDayMinutes: Scalars['Int'];
  maxWorkDayMinutes: Scalars['Int'];
  expectedWorkDayMinutes: Scalars['Int'];
  minEducationDayMinutes: Scalars['Int'];
  maxEducationDayMinutes: Scalars['Int'];
  maxEntryMinutes: Scalars['Int'];
  maxPeriodYearsCount: Scalars['Int'];
  finishedWeekDayCount: Scalars['Int'];
};

export type GqlMentor = {
  __typename?: 'Mentor';
  name: Scalars['String'];
  email: Scalars['String'];
  signature: Scalars['String'];
};

export type GqlMentorInput = {
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
};

export type GqlMutateEntryPayload = {
  __typename?: 'MutateEntryPayload';
  day: GqlDay;
  entry?: Maybe<GqlEntry>;
  report: GqlReport;
};

export type GqlMutation = {
  __typename?: 'Mutation';
  /** [DEV] Login as a user. */
  _devloginuser?: Maybe<GqlOAuthPayload>;
  /** [DEV] Sets the users type. */
  _devsetusertype: GqlDevSetUserPayload;
  /** Claims a Trainee by the current Trainer */
  claimTrainee?: Maybe<GqlTrainerTraineePayload>;
  /** Creates a new comment on a Day which is identified by the id argument. */
  createCommentOnDay: GqlCreateCommentPayload;
  /** Creates a new comment on a Entry which is identified by the id argument. */
  createCommentOnEntry: GqlCreateCommentPayload;
  /** Creates a new comment on a Report which is identified by the id argument. */
  createCommentOnReport: GqlCreateCommentPayload;
  /** Creates a new entry which is assigned to the matching report based on the day Id */
  createEntry: GqlMutateEntryPayload;
  /** Deletes an entry by the given ID. Only considers entries made by the current user. Returns the ID of the deleted entry. */
  deleteEntry: GqlMutateEntryPayload;
  /** Login via google. */
  login?: Maybe<GqlOAuthPayload>;
  /** Unclaims a Trainee by the current Trainer */
  unclaimTrainee?: Maybe<GqlTrainerTraineePayload>;
  /** Updates the current trainee */
  updateCurrentTrainee?: Maybe<GqlTrainee>;
  /** Updates the current user */
  updateCurrentUser?: Maybe<GqlUserInterface>;
  /** Updates day which is identified by the id argument. */
  updateDay?: Maybe<GqlDay>;
  updateEntry: GqlMutateEntryPayload;
  updateEntryOrder: GqlMutateEntryPayload;
  /** Updates report which is identified by the id argument. */
  updateReport?: Maybe<GqlUpdateReportPayload>;
  /** Creates Trainee. */
  createTrainee?: Maybe<GqlTrainee>;
  /** Creates Trainer. */
  createTrainer?: Maybe<GqlTrainer>;
  /** Marks User to be deleted */
  markUserForDeletion?: Maybe<GqlUserInterface>;
  /** Unmarks User from deletion */
  unmarkUserForDeletion?: Maybe<GqlUserInterface>;
  /** Updates Trainee. */
  updateTrainee?: Maybe<GqlTrainee>;
  /** Updates Trainer. */
  updateTrainer?: Maybe<GqlTrainer>;
  /** Link Alexa account */
  linkAlexa?: Maybe<GqlUserInterface>;
  /** Unlink Alexa account */
  unlinkAlexa?: Maybe<GqlUserInterface>;
  /** Create OAuth Code */
  createOAuthCode: Scalars['String'];
  /** Create Paper */
  postPaper: GqlPaper;
  /** Delete Paper */
  deletePaper: Scalars['Boolean'];
  /** Update Paper */
  answerPaper: GqlPaperFormData;
};


export type GqlMutation_DevloginuserArgs = {
  id: Scalars['String'];
};


export type GqlMutation_DevsetusertypeArgs = {
  type: Scalars['String'];
};


export type GqlMutationClaimTraineeArgs = {
  id: Scalars['ID'];
};


export type GqlMutationCreateCommentOnDayArgs = {
  text: Scalars['String'];
  id: Scalars['ID'];
  traineeId: Scalars['ID'];
};


export type GqlMutationCreateCommentOnEntryArgs = {
  text: Scalars['String'];
  id: Scalars['ID'];
  traineeId: Scalars['ID'];
};


export type GqlMutationCreateCommentOnReportArgs = {
  text: Scalars['String'];
  id: Scalars['ID'];
  traineeId: Scalars['ID'];
};


export type GqlMutationCreateEntryArgs = {
  dayId: Scalars['String'];
  input: GqlEntryInput;
};


export type GqlMutationDeleteEntryArgs = {
  id: Scalars['ID'];
};


export type GqlMutationLoginArgs = {
  googleToken: Scalars['String'];
};


export type GqlMutationUnclaimTraineeArgs = {
  id: Scalars['ID'];
};


export type GqlMutationUpdateCurrentTraineeArgs = {
  input: GqlUpdateCurrentTraineeInput;
};


export type GqlMutationUpdateCurrentUserArgs = {
  input?: Maybe<GqlUserInput>;
};


export type GqlMutationUpdateDayArgs = {
  status?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};


export type GqlMutationUpdateEntryArgs = {
  id: Scalars['ID'];
  input: GqlEntryInput;
};


export type GqlMutationUpdateEntryOrderArgs = {
  entryId: Scalars['ID'];
  dayId: Scalars['ID'];
  orderId: Scalars['Int'];
};


export type GqlMutationUpdateReportArgs = {
  summary?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};


export type GqlMutationCreateTraineeArgs = {
  input: GqlCreateTraineeInput;
};


export type GqlMutationCreateTrainerArgs = {
  input: GqlCreateTrainerInput;
};


export type GqlMutationMarkUserForDeletionArgs = {
  id: Scalars['ID'];
};


export type GqlMutationUnmarkUserForDeletionArgs = {
  id: Scalars['ID'];
};


export type GqlMutationUpdateTraineeArgs = {
  input: GqlUpdateTraineeInput;
  id: Scalars['ID'];
};


export type GqlMutationUpdateTrainerArgs = {
  input: GqlUpdateTrainerInput;
  id: Scalars['ID'];
};


export type GqlMutationLinkAlexaArgs = {
  code: Scalars['String'];
  state: Scalars['String'];
};


export type GqlMutationPostPaperArgs = {
  input: GqlPaperInput;
  id?: Maybe<Scalars['ID']>;
};


export type GqlMutationDeletePaperArgs = {
  id: Scalars['ID'];
};


export type GqlMutationAnswerPaperArgs = {
  input: GqlAnswerPaperInput;
};

export type GqlOAuthPayload = {
  __typename?: 'OAuthPayload';
  accessToken: Scalars['String'];
  refreshToken?: Maybe<Scalars['String']>;
  expiresIn: Scalars['Int'];
};

export type GqlPaper = {
  __typename?: 'Paper';
  id: Scalars['ID'];
  trainee: GqlTrainee;
  status: GqlPaperStatus;
  traineeForm: Array<GqlPaperFormData>;
  trainerForm: Array<GqlPaperFormData>;
  conclusion?: Maybe<Scalars['String']>;
  archivedAt?: Maybe<Scalars['String']>;
  createdAt: Scalars['String'];
  client: Scalars['String'];
  mentor: GqlMentor;
  periodStart: Scalars['String'];
  periodEnd: Scalars['String'];
  subject: Scalars['String'];
};

export type GqlPaperFormData = {
  __typename?: 'PaperFormData';
  id: Scalars['ID'];
  question: Scalars['String'];
  answer?: Maybe<Scalars['String']>;
  hint?: Maybe<Scalars['String']>;
};

export type GqlPaperInput = {
  client?: Maybe<Scalars['String']>;
  mentor?: Maybe<GqlMentorInput>;
  periodStart?: Maybe<Scalars['String']>;
  periodEnd?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  status?: Maybe<GqlPaperStatus>;
};

export type GqlPaperStatus =
  | 'InProgress'
  | 'TraineeDone'
  | 'MentorDone'
  | 'InReview'
  | 'Archived';

export type GqlPrintPayload = {
  __typename?: 'PrintPayload';
  estimatedWaitingTime: Scalars['Int'];
};

export type GqlQuery = {
  __typename?: 'Query';
  config: GqlLaraConfig;
  companies?: Maybe<Array<GqlCompany>>;
  /** Returns the logged in user. This user can be either a Trainee or a Trainer. */
  currentUser?: Maybe<GqlUserInterface>;
  /** Finds the report for a specifig trainee on the requested year and week. */
  reportForTrainee?: Maybe<GqlReport>;
  /** Finds the report for the requested year and week. */
  reportForYearAndWeek?: Maybe<GqlReport>;
  /** Get all Reports for the current User. The result can be filtered by the 'statuses' attribut */
  reports: Array<Maybe<GqlReport>>;
  /** Get all Suggestions */
  suggestions: Array<Scalars['String']>;
  /** Get all Trainees */
  trainees: Array<GqlTrainee>;
  /** Get all Trainers */
  trainers: Array<GqlTrainer>;
  /** Print single report or report batch */
  print: GqlPrintPayload;
  /** Get a User by ID */
  getUser?: Maybe<GqlUserInterface>;
  /** Will look for Users to delete */
  cleanup: Scalars['Boolean'];
  /** Get the alexa account linking url */
  alexaLinkingUrl?: Maybe<Scalars['String']>;
  /** Get the PAPER */
  getPaper?: Maybe<GqlPaper>;
};


export type GqlQueryReportForTraineeArgs = {
  year: Scalars['Int'];
  week: Scalars['Int'];
  id: Scalars['ID'];
};


export type GqlQueryReportForYearAndWeekArgs = {
  year: Scalars['Int'];
  week: Scalars['Int'];
};


export type GqlQueryReportsArgs = {
  statuses?: Maybe<Array<GqlReportStatus>>;
};


export type GqlQueryPrintArgs = {
  ids: Array<Scalars['ID']>;
};


export type GqlQueryGetUserArgs = {
  id: Scalars['ID'];
};


export type GqlQueryGetPaperArgs = {
  id: Scalars['ID'];
  token?: Maybe<Scalars['String']>;
};

export type GqlReport = GqlCommentableInterface & {
  __typename?: 'Report';
  comments: Array<GqlComment>;
  createdAt: Scalars['String'];
  days: Array<GqlDay>;
  department?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  status: GqlReportStatus;
  summary?: Maybe<Scalars['String']>;
  week: Scalars['Int'];
  year: Scalars['Int'];
  reportAccepted?: Maybe<Scalars['String']>;
  previousReportLink?: Maybe<Scalars['String']>;
  nextReportLink?: Maybe<Scalars['String']>;
};

/** Represents the current state of the report */
export type GqlReportStatus =
  /** Report is open */
  | 'todo'
  /** Passes the report to the trainer */
  | 'review'
  /** Used if there is any problem with a report */
  | 'reopened'
  /** Done reports are marked as archived */
  | 'archived';

export type GqlTrainee = GqlUserInterface & {
  __typename?: 'Trainee';
  /** The url for the users avatar image. */
  avatar: Scalars['String'];
  company: GqlCompany;
  course?: Maybe<Scalars['String']>;
  createdAt: Scalars['String'];
  endDate?: Maybe<Scalars['String']>;
  endOfToolUsage?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  id: Scalars['ID'];
  language?: Maybe<Scalars['String']>;
  lastName: Scalars['String'];
  notification?: Maybe<Scalars['Boolean']>;
  reports: Array<GqlReport>;
  signature?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['String']>;
  startOfToolUsage?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  trainer?: Maybe<GqlTrainer>;
  type: GqlUserTypeEnum;
  username: Scalars['String'];
  email: Scalars['String'];
  deleteAt?: Maybe<Scalars['String']>;
  openReportsCount: Scalars['Int'];
  alexaSkillLinked?: Maybe<Scalars['Boolean']>;
};

export type GqlTrainer = GqlUserInterface & {
  __typename?: 'Trainer';
  avatar: Scalars['String'];
  createdAt: Scalars['String'];
  firstName: Scalars['String'];
  id: Scalars['ID'];
  language?: Maybe<Scalars['String']>;
  lastName: Scalars['String'];
  notification?: Maybe<Scalars['Boolean']>;
  signature?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  trainees: Array<GqlTrainee>;
  type: GqlUserTypeEnum;
  username: Scalars['String'];
  email: Scalars['String'];
  deleteAt?: Maybe<Scalars['String']>;
  alexaSkillLinked?: Maybe<Scalars['Boolean']>;
};

export type GqlTrainerTraineePayload = {
  __typename?: 'TrainerTraineePayload';
  trainee: GqlTrainee;
  trainer: GqlTrainer;
};

export type GqlUpdateCurrentTraineeInput = {
  course?: Maybe<Scalars['String']>;
};

export type GqlUpdateReportPayload = {
  __typename?: 'UpdateReportPayload';
  trainee: GqlTrainee;
  report: GqlReport;
};

export type GqlUpdateTraineeInput = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['String']>;
  startOfToolUsage?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['String']>;
};

export type GqlUpdateTrainerInput = {
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
};

export type GqlUserInput = {
  language?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  notification?: Maybe<Scalars['Boolean']>;
};

export type GqlUserInterface = {
  avatar: Scalars['String'];
  createdAt: Scalars['String'];
  firstName: Scalars['String'];
  id: Scalars['ID'];
  language?: Maybe<Scalars['String']>;
  lastName: Scalars['String'];
  notification?: Maybe<Scalars['Boolean']>;
  signature?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  type: GqlUserTypeEnum;
  username: Scalars['String'];
  email: Scalars['String'];
  alexaSkillLinked?: Maybe<Scalars['Boolean']>;
};

export type GqlUserTypeEnum =
  /** User is a Trainee */
  | 'Trainee'
  /** User is a Trainer */
  | 'Trainer'
  /** User is an Admin */
  | 'Admin';

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type GqlResolversTypes = ResolversObject<{
  Admin: ResolverTypeWrapper<GqlAdmin>;
  String: ResolverTypeWrapper<Scalars['String']>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  AnswerPaperInput: GqlAnswerPaperInput;
  Comment: ResolverTypeWrapper<Comment>;
  CommentableInterface: ResolverTypeWrapper<CommentableInterface>;
  Company: ResolverTypeWrapper<GqlCompany>;
  CreateCommentPayload: ResolverTypeWrapper<Omit<GqlCreateCommentPayload, 'comment' | 'commentable'> & { comment: GqlResolversTypes['Comment'], commentable: GqlResolversTypes['CommentableInterface'] }>;
  CreateTraineeInput: GqlCreateTraineeInput;
  CreateTrainerInput: GqlCreateTrainerInput;
  Day: ResolverTypeWrapper<Day>;
  DayStatusEnum: GqlDayStatusEnum;
  DevSetUserPayload: ResolverTypeWrapper<Omit<GqlDevSetUserPayload, 'user'> & { user?: Maybe<GqlResolversTypes['UserInterface']> }>;
  Entry: ResolverTypeWrapper<Entry>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  EntryInput: GqlEntryInput;
  LaraConfig: ResolverTypeWrapper<GqlLaraConfig>;
  Mentor: ResolverTypeWrapper<GqlMentor>;
  MentorInput: GqlMentorInput;
  MutateEntryPayload: ResolverTypeWrapper<Omit<GqlMutateEntryPayload, 'day' | 'entry' | 'report'> & { day: GqlResolversTypes['Day'], entry?: Maybe<GqlResolversTypes['Entry']>, report: GqlResolversTypes['Report'] }>;
  Mutation: ResolverTypeWrapper<{}>;
  OAuthPayload: ResolverTypeWrapper<GqlOAuthPayload>;
  Paper: ResolverTypeWrapper<Paper>;
  PaperFormData: ResolverTypeWrapper<GqlPaperFormData>;
  PaperInput: GqlPaperInput;
  PaperStatus: GqlPaperStatus;
  PrintPayload: ResolverTypeWrapper<GqlPrintPayload>;
  Query: ResolverTypeWrapper<{}>;
  Report: ResolverTypeWrapper<Report>;
  ReportStatus: GqlReportStatus;
  Trainee: ResolverTypeWrapper<Trainee>;
  Trainer: ResolverTypeWrapper<Trainer>;
  TrainerTraineePayload: ResolverTypeWrapper<Omit<GqlTrainerTraineePayload, 'trainee' | 'trainer'> & { trainee: GqlResolversTypes['Trainee'], trainer: GqlResolversTypes['Trainer'] }>;
  UpdateCurrentTraineeInput: GqlUpdateCurrentTraineeInput;
  UpdateReportPayload: ResolverTypeWrapper<Omit<GqlUpdateReportPayload, 'trainee' | 'report'> & { trainee: GqlResolversTypes['Trainee'], report: GqlResolversTypes['Report'] }>;
  UpdateTraineeInput: GqlUpdateTraineeInput;
  UpdateTrainerInput: GqlUpdateTrainerInput;
  UserInput: GqlUserInput;
  UserInterface: ResolverTypeWrapper<UserInterface>;
  UserTypeEnum: GqlUserTypeEnum;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type GqlResolversParentTypes = ResolversObject<{
  Admin: GqlAdmin;
  String: Scalars['String'];
  ID: Scalars['ID'];
  Boolean: Scalars['Boolean'];
  AnswerPaperInput: GqlAnswerPaperInput;
  Comment: Comment;
  CommentableInterface: CommentableInterface;
  Company: GqlCompany;
  CreateCommentPayload: Omit<GqlCreateCommentPayload, 'comment' | 'commentable'> & { comment: GqlResolversParentTypes['Comment'], commentable: GqlResolversParentTypes['CommentableInterface'] };
  CreateTraineeInput: GqlCreateTraineeInput;
  CreateTrainerInput: GqlCreateTrainerInput;
  Day: Day;
  DevSetUserPayload: Omit<GqlDevSetUserPayload, 'user'> & { user?: Maybe<GqlResolversParentTypes['UserInterface']> };
  Entry: Entry;
  Int: Scalars['Int'];
  EntryInput: GqlEntryInput;
  LaraConfig: GqlLaraConfig;
  Mentor: GqlMentor;
  MentorInput: GqlMentorInput;
  MutateEntryPayload: Omit<GqlMutateEntryPayload, 'day' | 'entry' | 'report'> & { day: GqlResolversParentTypes['Day'], entry?: Maybe<GqlResolversParentTypes['Entry']>, report: GqlResolversParentTypes['Report'] };
  Mutation: {};
  OAuthPayload: GqlOAuthPayload;
  Paper: Paper;
  PaperFormData: GqlPaperFormData;
  PaperInput: GqlPaperInput;
  PrintPayload: GqlPrintPayload;
  Query: {};
  Report: Report;
  Trainee: Trainee;
  Trainer: Trainer;
  TrainerTraineePayload: Omit<GqlTrainerTraineePayload, 'trainee' | 'trainer'> & { trainee: GqlResolversParentTypes['Trainee'], trainer: GqlResolversParentTypes['Trainer'] };
  UpdateCurrentTraineeInput: GqlUpdateCurrentTraineeInput;
  UpdateReportPayload: Omit<GqlUpdateReportPayload, 'trainee' | 'report'> & { trainee: GqlResolversParentTypes['Trainee'], report: GqlResolversParentTypes['Report'] };
  UpdateTraineeInput: GqlUpdateTraineeInput;
  UpdateTrainerInput: GqlUpdateTrainerInput;
  UserInput: GqlUserInput;
  UserInterface: UserInterface;
}>;

export type GqlAdminResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Admin'] = GqlResolversParentTypes['Admin']> = ResolversObject<{
  avatar?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  notification?: Resolver<Maybe<GqlResolversTypes['Boolean']>, ParentType, ContextType>;
  theme?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<GqlResolversTypes['UserTypeEnum'], ParentType, ContextType>;
  username?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  email?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  signature?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  alexaSkillLinked?: Resolver<Maybe<GqlResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlCommentResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Comment'] = GqlResolversParentTypes['Comment']> = ResolversObject<{
  createdAt?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
  text?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  user?: Resolver<GqlResolversTypes['UserInterface'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlCommentableInterfaceResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['CommentableInterface'] = GqlResolversParentTypes['CommentableInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'Day' | 'Entry' | 'Report', ParentType, ContextType>;
  comments?: Resolver<Array<GqlResolversTypes['Comment']>, ParentType, ContextType>;
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
}>;

export type GqlCompanyResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Company'] = GqlResolversParentTypes['Company']> = ResolversObject<{
  id?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  logo?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlCreateCommentPayloadResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['CreateCommentPayload'] = GqlResolversParentTypes['CreateCommentPayload']> = ResolversObject<{
  comment?: Resolver<GqlResolversTypes['Comment'], ParentType, ContextType>;
  commentable?: Resolver<GqlResolversTypes['CommentableInterface'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlDayResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Day'] = GqlResolversParentTypes['Day']> = ResolversObject<{
  comments?: Resolver<Array<GqlResolversTypes['Comment']>, ParentType, ContextType>;
  createdAt?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  date?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  entries?: Resolver<Array<GqlResolversTypes['Entry']>, ParentType, ContextType>;
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<GqlResolversTypes['DayStatusEnum']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlDevSetUserPayloadResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['DevSetUserPayload'] = GqlResolversParentTypes['DevSetUserPayload']> = ResolversObject<{
  user?: Resolver<Maybe<GqlResolversTypes['UserInterface']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlEntryResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Entry'] = GqlResolversParentTypes['Entry']> = ResolversObject<{
  comments?: Resolver<Array<GqlResolversTypes['Comment']>, ParentType, ContextType>;
  createdAt?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
  orderId?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  text?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  time?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlLaraConfigResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['LaraConfig'] = GqlResolversParentTypes['LaraConfig']> = ResolversObject<{
  minWorkDayMinutes?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  maxWorkDayMinutes?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  expectedWorkDayMinutes?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  minEducationDayMinutes?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  maxEducationDayMinutes?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  maxEntryMinutes?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  maxPeriodYearsCount?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  finishedWeekDayCount?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlMentorResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Mentor'] = GqlResolversParentTypes['Mentor']> = ResolversObject<{
  name?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  email?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  signature?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlMutateEntryPayloadResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['MutateEntryPayload'] = GqlResolversParentTypes['MutateEntryPayload']> = ResolversObject<{
  day?: Resolver<GqlResolversTypes['Day'], ParentType, ContextType>;
  entry?: Resolver<Maybe<GqlResolversTypes['Entry']>, ParentType, ContextType>;
  report?: Resolver<GqlResolversTypes['Report'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlMutationResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Mutation'] = GqlResolversParentTypes['Mutation']> = ResolversObject<{
  _devloginuser?: Resolver<Maybe<GqlResolversTypes['OAuthPayload']>, ParentType, ContextType, RequireFields<GqlMutation_DevloginuserArgs, 'id'>>;
  _devsetusertype?: Resolver<GqlResolversTypes['DevSetUserPayload'], ParentType, ContextType, RequireFields<GqlMutation_DevsetusertypeArgs, 'type'>>;
  claimTrainee?: Resolver<Maybe<GqlResolversTypes['TrainerTraineePayload']>, ParentType, ContextType, RequireFields<GqlMutationClaimTraineeArgs, 'id'>>;
  createCommentOnDay?: Resolver<GqlResolversTypes['CreateCommentPayload'], ParentType, ContextType, RequireFields<GqlMutationCreateCommentOnDayArgs, 'text' | 'id' | 'traineeId'>>;
  createCommentOnEntry?: Resolver<GqlResolversTypes['CreateCommentPayload'], ParentType, ContextType, RequireFields<GqlMutationCreateCommentOnEntryArgs, 'text' | 'id' | 'traineeId'>>;
  createCommentOnReport?: Resolver<GqlResolversTypes['CreateCommentPayload'], ParentType, ContextType, RequireFields<GqlMutationCreateCommentOnReportArgs, 'text' | 'id' | 'traineeId'>>;
  createEntry?: Resolver<GqlResolversTypes['MutateEntryPayload'], ParentType, ContextType, RequireFields<GqlMutationCreateEntryArgs, 'dayId' | 'input'>>;
  deleteEntry?: Resolver<GqlResolversTypes['MutateEntryPayload'], ParentType, ContextType, RequireFields<GqlMutationDeleteEntryArgs, 'id'>>;
  login?: Resolver<Maybe<GqlResolversTypes['OAuthPayload']>, ParentType, ContextType, RequireFields<GqlMutationLoginArgs, 'googleToken'>>;
  unclaimTrainee?: Resolver<Maybe<GqlResolversTypes['TrainerTraineePayload']>, ParentType, ContextType, RequireFields<GqlMutationUnclaimTraineeArgs, 'id'>>;
  updateCurrentTrainee?: Resolver<Maybe<GqlResolversTypes['Trainee']>, ParentType, ContextType, RequireFields<GqlMutationUpdateCurrentTraineeArgs, 'input'>>;
  updateCurrentUser?: Resolver<Maybe<GqlResolversTypes['UserInterface']>, ParentType, ContextType, RequireFields<GqlMutationUpdateCurrentUserArgs, never>>;
  updateDay?: Resolver<Maybe<GqlResolversTypes['Day']>, ParentType, ContextType, RequireFields<GqlMutationUpdateDayArgs, 'id'>>;
  updateEntry?: Resolver<GqlResolversTypes['MutateEntryPayload'], ParentType, ContextType, RequireFields<GqlMutationUpdateEntryArgs, 'id' | 'input'>>;
  updateEntryOrder?: Resolver<GqlResolversTypes['MutateEntryPayload'], ParentType, ContextType, RequireFields<GqlMutationUpdateEntryOrderArgs, 'entryId' | 'dayId' | 'orderId'>>;
  updateReport?: Resolver<Maybe<GqlResolversTypes['UpdateReportPayload']>, ParentType, ContextType, RequireFields<GqlMutationUpdateReportArgs, 'id'>>;
  createTrainee?: Resolver<Maybe<GqlResolversTypes['Trainee']>, ParentType, ContextType, RequireFields<GqlMutationCreateTraineeArgs, 'input'>>;
  createTrainer?: Resolver<Maybe<GqlResolversTypes['Trainer']>, ParentType, ContextType, RequireFields<GqlMutationCreateTrainerArgs, 'input'>>;
  markUserForDeletion?: Resolver<Maybe<GqlResolversTypes['UserInterface']>, ParentType, ContextType, RequireFields<GqlMutationMarkUserForDeletionArgs, 'id'>>;
  unmarkUserForDeletion?: Resolver<Maybe<GqlResolversTypes['UserInterface']>, ParentType, ContextType, RequireFields<GqlMutationUnmarkUserForDeletionArgs, 'id'>>;
  updateTrainee?: Resolver<Maybe<GqlResolversTypes['Trainee']>, ParentType, ContextType, RequireFields<GqlMutationUpdateTraineeArgs, 'input' | 'id'>>;
  updateTrainer?: Resolver<Maybe<GqlResolversTypes['Trainer']>, ParentType, ContextType, RequireFields<GqlMutationUpdateTrainerArgs, 'input' | 'id'>>;
  linkAlexa?: Resolver<Maybe<GqlResolversTypes['UserInterface']>, ParentType, ContextType, RequireFields<GqlMutationLinkAlexaArgs, 'code' | 'state'>>;
  unlinkAlexa?: Resolver<Maybe<GqlResolversTypes['UserInterface']>, ParentType, ContextType>;
  createOAuthCode?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  postPaper?: Resolver<GqlResolversTypes['Paper'], ParentType, ContextType, RequireFields<GqlMutationPostPaperArgs, 'input'>>;
  deletePaper?: Resolver<GqlResolversTypes['Boolean'], ParentType, ContextType, RequireFields<GqlMutationDeletePaperArgs, 'id'>>;
  answerPaper?: Resolver<GqlResolversTypes['PaperFormData'], ParentType, ContextType, RequireFields<GqlMutationAnswerPaperArgs, 'input'>>;
}>;

export type GqlOAuthPayloadResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['OAuthPayload'] = GqlResolversParentTypes['OAuthPayload']> = ResolversObject<{
  accessToken?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  refreshToken?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  expiresIn?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlPaperResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Paper'] = GqlResolversParentTypes['Paper']> = ResolversObject<{
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
  trainee?: Resolver<GqlResolversTypes['Trainee'], ParentType, ContextType>;
  status?: Resolver<GqlResolversTypes['PaperStatus'], ParentType, ContextType>;
  traineeForm?: Resolver<Array<GqlResolversTypes['PaperFormData']>, ParentType, ContextType>;
  trainerForm?: Resolver<Array<GqlResolversTypes['PaperFormData']>, ParentType, ContextType>;
  conclusion?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  archivedAt?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  client?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  mentor?: Resolver<GqlResolversTypes['Mentor'], ParentType, ContextType>;
  periodStart?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  periodEnd?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  subject?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlPaperFormDataResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['PaperFormData'] = GqlResolversParentTypes['PaperFormData']> = ResolversObject<{
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
  question?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  answer?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  hint?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlPrintPayloadResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['PrintPayload'] = GqlResolversParentTypes['PrintPayload']> = ResolversObject<{
  estimatedWaitingTime?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlQueryResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Query'] = GqlResolversParentTypes['Query']> = ResolversObject<{
  config?: Resolver<GqlResolversTypes['LaraConfig'], ParentType, ContextType>;
  companies?: Resolver<Maybe<Array<GqlResolversTypes['Company']>>, ParentType, ContextType>;
  currentUser?: Resolver<Maybe<GqlResolversTypes['UserInterface']>, ParentType, ContextType>;
  reportForTrainee?: Resolver<Maybe<GqlResolversTypes['Report']>, ParentType, ContextType, RequireFields<GqlQueryReportForTraineeArgs, 'year' | 'week' | 'id'>>;
  reportForYearAndWeek?: Resolver<Maybe<GqlResolversTypes['Report']>, ParentType, ContextType, RequireFields<GqlQueryReportForYearAndWeekArgs, 'year' | 'week'>>;
  reports?: Resolver<Array<Maybe<GqlResolversTypes['Report']>>, ParentType, ContextType, RequireFields<GqlQueryReportsArgs, never>>;
  suggestions?: Resolver<Array<GqlResolversTypes['String']>, ParentType, ContextType>;
  trainees?: Resolver<Array<GqlResolversTypes['Trainee']>, ParentType, ContextType>;
  trainers?: Resolver<Array<GqlResolversTypes['Trainer']>, ParentType, ContextType>;
  print?: Resolver<GqlResolversTypes['PrintPayload'], ParentType, ContextType, RequireFields<GqlQueryPrintArgs, 'ids'>>;
  getUser?: Resolver<Maybe<GqlResolversTypes['UserInterface']>, ParentType, ContextType, RequireFields<GqlQueryGetUserArgs, 'id'>>;
  cleanup?: Resolver<GqlResolversTypes['Boolean'], ParentType, ContextType>;
  alexaLinkingUrl?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  getPaper?: Resolver<Maybe<GqlResolversTypes['Paper']>, ParentType, ContextType, RequireFields<GqlQueryGetPaperArgs, 'id'>>;
}>;

export type GqlReportResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Report'] = GqlResolversParentTypes['Report']> = ResolversObject<{
  comments?: Resolver<Array<GqlResolversTypes['Comment']>, ParentType, ContextType>;
  createdAt?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  days?: Resolver<Array<GqlResolversTypes['Day']>, ParentType, ContextType>;
  department?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<GqlResolversTypes['ReportStatus'], ParentType, ContextType>;
  summary?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  week?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  year?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  reportAccepted?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  previousReportLink?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  nextReportLink?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlTraineeResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Trainee'] = GqlResolversParentTypes['Trainee']> = ResolversObject<{
  avatar?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  company?: Resolver<GqlResolversTypes['Company'], ParentType, ContextType>;
  course?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  endDate?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  endOfToolUsage?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  notification?: Resolver<Maybe<GqlResolversTypes['Boolean']>, ParentType, ContextType>;
  reports?: Resolver<Array<GqlResolversTypes['Report']>, ParentType, ContextType>;
  signature?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  startDate?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  startOfToolUsage?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  theme?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  trainer?: Resolver<Maybe<GqlResolversTypes['Trainer']>, ParentType, ContextType>;
  type?: Resolver<GqlResolversTypes['UserTypeEnum'], ParentType, ContextType>;
  username?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  email?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  deleteAt?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  openReportsCount?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  alexaSkillLinked?: Resolver<Maybe<GqlResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlTrainerResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['Trainer'] = GqlResolversParentTypes['Trainer']> = ResolversObject<{
  avatar?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  notification?: Resolver<Maybe<GqlResolversTypes['Boolean']>, ParentType, ContextType>;
  signature?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  theme?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  trainees?: Resolver<Array<GqlResolversTypes['Trainee']>, ParentType, ContextType>;
  type?: Resolver<GqlResolversTypes['UserTypeEnum'], ParentType, ContextType>;
  username?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  email?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  deleteAt?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  alexaSkillLinked?: Resolver<Maybe<GqlResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlTrainerTraineePayloadResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['TrainerTraineePayload'] = GqlResolversParentTypes['TrainerTraineePayload']> = ResolversObject<{
  trainee?: Resolver<GqlResolversTypes['Trainee'], ParentType, ContextType>;
  trainer?: Resolver<GqlResolversTypes['Trainer'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlUpdateReportPayloadResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['UpdateReportPayload'] = GqlResolversParentTypes['UpdateReportPayload']> = ResolversObject<{
  trainee?: Resolver<GqlResolversTypes['Trainee'], ParentType, ContextType>;
  report?: Resolver<GqlResolversTypes['Report'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GqlUserInterfaceResolvers<ContextType = Context, ParentType extends GqlResolversParentTypes['UserInterface'] = GqlResolversParentTypes['UserInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'Admin' | 'Trainee' | 'Trainer', ParentType, ContextType>;
  avatar?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<GqlResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  notification?: Resolver<Maybe<GqlResolversTypes['Boolean']>, ParentType, ContextType>;
  signature?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  theme?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<GqlResolversTypes['UserTypeEnum'], ParentType, ContextType>;
  username?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  email?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  alexaSkillLinked?: Resolver<Maybe<GqlResolversTypes['Boolean']>, ParentType, ContextType>;
}>;

export type GqlResolvers<ContextType = Context> = ResolversObject<{
  Admin?: GqlAdminResolvers<ContextType>;
  Comment?: GqlCommentResolvers<ContextType>;
  CommentableInterface?: GqlCommentableInterfaceResolvers<ContextType>;
  Company?: GqlCompanyResolvers<ContextType>;
  CreateCommentPayload?: GqlCreateCommentPayloadResolvers<ContextType>;
  Day?: GqlDayResolvers<ContextType>;
  DevSetUserPayload?: GqlDevSetUserPayloadResolvers<ContextType>;
  Entry?: GqlEntryResolvers<ContextType>;
  LaraConfig?: GqlLaraConfigResolvers<ContextType>;
  Mentor?: GqlMentorResolvers<ContextType>;
  MutateEntryPayload?: GqlMutateEntryPayloadResolvers<ContextType>;
  Mutation?: GqlMutationResolvers<ContextType>;
  OAuthPayload?: GqlOAuthPayloadResolvers<ContextType>;
  Paper?: GqlPaperResolvers<ContextType>;
  PaperFormData?: GqlPaperFormDataResolvers<ContextType>;
  PrintPayload?: GqlPrintPayloadResolvers<ContextType>;
  Query?: GqlQueryResolvers<ContextType>;
  Report?: GqlReportResolvers<ContextType>;
  Trainee?: GqlTraineeResolvers<ContextType>;
  Trainer?: GqlTrainerResolvers<ContextType>;
  TrainerTraineePayload?: GqlTrainerTraineePayloadResolvers<ContextType>;
  UpdateReportPayload?: GqlUpdateReportPayloadResolvers<ContextType>;
  UserInterface?: GqlUserInterfaceResolvers<ContextType>;
}>;


