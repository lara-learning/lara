type Comment {
  createdAt: String!
  id: ID!
  text: String
  user: UserInterface!
  published: Boolean!
}

"""
An object that can have comments
"""
interface CommentableInterface {
  comments: [Comment!]!
  id: ID!
}

type Company {
  id: String!
  logo: String!
  name: String!
}

type CreateCommentPayload {
  comment: Comment!
  commentable: CommentableInterface!
}

type UpdateCommentPayload {
  comment: Comment!
  commentable: CommentableInterface!
}

type DeleteCommentPayload {
  comment: Comment!
  commentable: CommentableInterface!
}

type PublishCommentsPayload {
  report: Report!
}

type Day implements CommentableInterface {
  comments: [Comment!]!
  createdAt: String!
  date: String!
  entries: [Entry!]!
  id: ID!
  status: DayStatusEnum
}

enum DayStatusEnum {
  """
  workday
  """
  work

  """
  vacation
  """
  vacation

  """
  sick leave
  """
  sick

  """
  school/university
  """
  education

  """
  public holiday
  """
  holiday
}

"""
Autogenerated return type of DevSetUser
"""
type DevSetUserPayload {
  user: UserInterface
}

type Entry implements CommentableInterface {
  comments: [Comment!]!
  createdAt: String!
  id: ID!
  orderId: Int!
  text: String!
  time: Int!
}

input EntryInput {
  text: String!
  time: Int!
}

type OAuthPayload {
  accessToken: String!
  refreshToken: String
  expiresIn: Int!
}

type MutateEntryPayload {
  day: Day!
  entry: Entry
  report: Report!
}

type UpdateReportPayload {
  trainee: Trainee!
  report: Report!
}

input MentorInput {
  name: String
  email: String
  signature: String
}

input PaperEntryInput {
  id: ID!
  questionId: ID!
  question: String!
  answer: String
  hint: String
}

type MutatePaperPayload {
  papers: [Paper]
}

input PaperInput {
  traineeId: ID!
  trainerId: ID!
  client: String!
  mentorId: ID!
  periodStart: String
  periodEnd: String
  schoolPeriodStart: String
  schoolPeriodEnd: String
  subject: String!
  status: PaperStatus!
  briefing: [PaperEntryInput!]!
  feedback: [PaperEntryInput!]!
}

input PaperUpdateInput {
  id: ID!
  traineeId: ID!
  trainerId: ID!
  client: String!
  mentorId: ID!
  periodStart: String
  periodEnd: String
  schoolPeriodStart: String
  schoolPeriodEnd: String
  subject: String!
  status: PaperStatus!
  briefing: [PaperEntryInput!]!
  feedback: [PaperEntryInput!]!
}

input AnswerPaperInput {
  id: ID!
  questionId: ID!
  question: String!
  answer: String!
  hint: String!
}

type Mutation {
  """
  [DEV] Login as a user.
  """
  _devloginuser(id: String!): OAuthPayload

  """
  [DEV] Sets the users type.
  """
  _devsetusertype(type: String!): DevSetUserPayload!

  """
  Claims a Trainee by the current Trainer
  """
  claimTrainee(id: ID!): TrainerTraineePayload

  """
  Creates a new comment on a Day which is identified by the id argument.
  """
  createCommentOnDay(text: String!, id: ID!, traineeId: ID!): CreateCommentPayload!

  """
  Creates a new comment on a Entry which is identified by the id argument.
  """
  createCommentOnEntry(text: String!, id: ID!, traineeId: ID!): CreateCommentPayload!

  """
  Creates a new comment on a Report which is identified by the id argument.
  """
  createCommentOnReport(text: String!, id: ID!, traineeId: ID!): CreateCommentPayload!

  """
  Updates a comment on a Day which is identified by the id argument.
  """
  updateCommentOnDay(text: String!, id: ID!, traineeId: ID!, commentId: ID!): UpdateCommentPayload!

  """
  Updates a comment on a Entry which is identified by the id argument.
  """
  updateCommentOnEntry(text: String!, id: ID!, traineeId: ID!, commentId: ID!): UpdateCommentPayload!

  """
  Updates a comment on a Report which is identified by the id argument.
  """
  updateCommentOnReport(text: String!, id: ID!, traineeId: ID!, commentId: ID!): UpdateCommentPayload!

  """
  Deletes a comment on a Day which is identified by the id argument.
  """
  deleteCommentOnDay(id: ID!, traineeId: ID!, commentId: ID!): DeleteCommentPayload!

  """
  Deletes a comment on a Entry which is identified by the id argument.
  """
  deleteCommentOnEntry(id: ID!, traineeId: ID!, commentId: ID!): DeleteCommentPayload!

  """
  Deletes a comment on a Report which is identified by the id argument.
  """
  deleteCommentOnReport(id: ID!, traineeId: ID!, commentId: ID!): DeleteCommentPayload!

  """
  Publishes all comments on a report which is identified by the id argument.
  """
  publishAllComments(id: ID!, traineeId: ID!): PublishCommentsPayload!

  """
  Creates a new entry which is assigned to the matching report based on the day Id
  """
  createEntry(dayId: String!, input: EntryInput!): MutateEntryPayload!

  """
  Deletes an entry by the given ID. Only considers entries made by the current user. Returns the ID of the deleted entry.
  """
  deleteEntry(id: ID!): MutateEntryPayload!

  """
  Login via microsoft
  """
  login(email: String!): OAuthPayload

  """
  Unclaims a Trainee by the current Trainer
  """
  unclaimTrainee(id: ID!): TrainerTraineePayload

  """
  Updates the current trainee
  """
  updateCurrentTrainee(input: UpdateCurrentTraineeInput!): Trainee

  """
  Updates the current user
  """
  updateCurrentUser(input: UserInput): UserInterface

  """
  Updates day which is identified by the id argument.
  """
  updateDay(status: String, id: ID!): Day
  updateEntry(id: ID!, input: EntryInput!): MutateEntryPayload!
  updateEntryOrder(entryId: ID!, dayId: ID!, orderId: Int!): MutateEntryPayload!

  """
  Updates report which is identified by the id argument.
  """
  updateReport(summary: String, department: String, status: String, id: ID!): UpdateReportPayload

  """
  Creates Trainee.
  """
  createTrainee(input: CreateTraineeInput!): Trainee

  """
  Creates Trainer.
  """
  createTrainer(input: CreateTrainerInput!): Trainer

  """
  Creates Admin.
  """
  createAdmin(input: CreateAdminInput!): Admin

  """
  Creates Mentor.
  """
  createMentor(input: CreateMentorInput!): Mentor

  """
  Get a User by Email
  """
  getUserByEmail(email: String!): UserInterface

  """
  Marks User to be deleted
  """
  markUserForDeletion(id: ID!): UserInterface

  """
  Unmarks User from deletion
  """
  unmarkUserForDeletion(id: ID!): UserInterface

  """
  Updates Trainee.
  """
  updateTrainee(input: UpdateTraineeInput!, id: ID!): Trainee

  """
  Updates Trainer.
  """
  updateTrainer(input: UpdateTrainerInput!, id: ID!): Trainer

  """
  Updates Admin.
  """
  updateAdmin(input: UpdateAdminInput!, id: ID!): Admin

  """
  Updates Mentor.
  """
  updateMentor(input: UpdateMentorInput!, id: ID!): Mentor

  """
  Link Alexa account
  """
  linkAlexa(code: String!, state: String!): UserInterface

  """
  Unlink Alexa account
  """
  unlinkAlexa: UserInterface

  """
  Create OAuth Code
  """
  createOAuthCode: String!

  """
  Get Avatar Bucket Upload URL
  """
  getAvatarSignedUrl(id: String!): String

  """
  Create Paper
  """
  createPaper(input: PaperInput!): Paper!

  """
  Update Paper
  """
  updatePaper(input: PaperUpdateInput!): Paper!

  """
  Delete Paper
  """
  deletePaper(paperId: ID!): [Paper]!

  """
  Updates Entry for Lara Paper
  """
  updatePaperEntry(input: AnswerPaperInput!): PaperFormData!

  """
  Creates Entry for Lara Paper
  """
  createPaperEntry(input: AnswerPaperInput!): PaperFormData!

  """
  Deletes Entry for Lara Paper
  """
  deletePaperEntry(id: ID!): PaperFormData!
}

type LaraConfig {
  minWorkDayMinutes: Int!
  maxWorkDayMinutes: Int!
  expectedWorkDayMinutes: Int!

  minEducationDayMinutes: Int!
  maxEducationDayMinutes: Int!

  maxEntryMinutes: Int!

  maxPeriodYearsCount: Int!

  finishedWeekDayCount: Int!
}

type Suggestion {
  text: String!
  time: String!
}

type Query {
  config: LaraConfig!

  companies: [Company!]

  """
  Returns the logged in user. This user can be either a Trainee or a Trainer.
  """
  currentUser: UserInterface

  """
  Finds the report for a specifig trainee on the requested year and week.
  """
  reportForTrainee(year: Int!, week: Int!, id: ID!): Report

  """
  Finds the report for the requested year and week.
  """
  reportForYearAndWeek(year: Int!, week: Int!): Report

  """
  Get all Reports for the current User. The result can be filtered by the 'statuses' attribut
  """
  reports(statuses: [ReportStatus!]): [Report]!

  """
  Get all Suggestions
  """
  suggestions: [Suggestion!]!

  """
  Get all Trainees
  """
  trainees: [Trainee!]!

  """
  Get all Trainers
  """
  trainers: [Trainer!]!

  """
  Get all Admins
  """
  admins: [Admin!]!

  """
  Get all Mentors
  """
  mentors: [Mentor!]!

  """
  Print single report or report batch
  """
  print(ids: [ID!]!): PrintPayload!

  """
  Print single paper
  """
  printPaper(ids: [ID!]!): PrintPayload!

  """
  Get a User by ID
  """
  getUser(id: ID!): UserInterface

  """
  Will look for Users to delete
  """
  cleanup: Boolean!

  """
  Get the alexa account linking url
  """
  alexaLinkingUrl: String
}

type PrintPayload {
  estimatedWaitingTime: Int!
}

type Report implements CommentableInterface {
  comments: [Comment!]!
  createdAt: String!
  days: [Day!]!
  department: String
  id: ID!
  status: ReportStatus!
  summary: String
  traineeId: ID!
  week: Int!
  year: Int!
  reportAccepted: String
  previousReportLink: String
  nextReportLink: String
}

"""
Represents the current state of the report
"""
enum ReportStatus {
  """
  Report is open
  """
  todo

  """
  Passes the report to the trainer
  """
  review

  """
  Used if there is any problem with a report
  """
  reopened

  """
  Done reports are marked as archived
  """
  archived
}

type Trainee implements UserInterface {
  company: Company!
  course: String
  createdAt: String!
  endDate: String
  endOfToolUsage: String
  firstName: String!
  id: ID!
  language: String
  lastName: String!
  notification: Boolean
  reports: [Report!]!
  papers: [Paper]
  signature: String
  startDate: String
  startOfToolUsage: String
  theme: String
  trainer: Trainer
  type: UserTypeEnum!
  email: String!
  deleteAt: String
  openReportsCount: Int!
  alexaSkillLinked: Boolean
}

input CreateTraineeInput {
  firstName: String!
  lastName: String!
  email: String!
  startDate: String!
  endDate: String!
  startOfToolUsage: String!
  companyId: String!
}

input UpdateTraineeInput {
  firstName: String
  lastName: String
  email: String
  startDate: String
  endDate: String
  startOfToolUsage: String
  companyId: String
}

input UpdateCurrentTraineeInput {
  course: String
}

input CreateTrainerInput {
  email: String!
  firstName: String!
  lastName: String!
}

input CreateMentorInput {
  email: String!
  firstName: String!
  lastName: String!
  startDate: String
  endDate: String
}

input UpdateTrainerInput {
  email: String
  firstName: String
  lastName: String
}

input UpdateMentorInput {
  email: String
  firstName: String
  lastName: String
  startDate: String
  endDate: String
}

type Trainer implements UserInterface {
  createdAt: String!
  firstName: String!
  id: ID!
  language: String
  lastName: String!
  notification: Boolean
  papers: [Paper]
  signature: String
  theme: String
  trainees: [Trainee!]!
  type: UserTypeEnum!
  email: String!
  deleteAt: String
  alexaSkillLinked: Boolean
}

input CreateAdminInput {
  email: String!
  firstName: String!
  lastName: String!
}

input UpdateAdminInput {
  email: String
  firstName: String
  lastName: String
}

type Mentor implements UserInterface {
  createdAt: String!
  firstName: String!
  id: ID!
  language: String
  lastName: String!
  notification: Boolean
  signature: String
  theme: String
  type: UserTypeEnum!
  papers: [Paper]
  startDate: String
  endDate: String
  email: String!
  deleteAt: String
  alexaSkillLinked: Boolean
}

type Admin implements UserInterface {
  createdAt: String!
  firstName: String!
  id: ID!
  language: String
  lastName: String!
  notification: Boolean
  theme: String
  type: UserTypeEnum!
  email: String!
  signature: String
  deleteAt: String
  alexaSkillLinked: Boolean
}

type TrainerTraineePayload {
  trainee: Trainee!
  trainer: Trainer!
}

input UserInput {
  language: String
  theme: String
  signature: String
  notification: Boolean
}

interface UserInterface {
  createdAt: String!
  firstName: String!
  id: ID!
  language: String
  lastName: String!
  notification: Boolean
  signature: String
  theme: String
  type: UserTypeEnum!
  email: String!
  alexaSkillLinked: Boolean
}

enum UserTypeEnum {
  """
  User is a Trainee
  """
  Trainee

  """
  User is a Trainer
  """
  Trainer

  """
  User is a Mentor
  """
  Mentor

  """
  User is an Admin
  """
  Admin
}

enum PaperStatus {
  NotStarted
  InProgress
  TraineeDone
  MentorDone
  InReview
  Archived
}

type PaperFormData {
  id: ID!
  questionId: ID!
  question: String!
  answer: String
  hint: String
}

type Paper {
  id: ID!
  traineeId: ID!
  trainerId: ID!
  status: PaperStatus!
  briefing: [PaperFormData!]!
  feedback: [PaperFormData!]!
  conclusion: String
  archivedAt: String
  createdAt: String
  client: String!
  mentorId: ID!
  periodStart: String
  periodEnd: String
  schoolPeriodStart: String
  schoolPeriodEnd: String
  subject: String!
}
