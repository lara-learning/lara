import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | undefined;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Admin = UserInterface & {
  __typename?: 'Admin';
  avatar: Scalars['String'];
  createdAt: Scalars['String'];
  firstName: Scalars['String'];
  id: Scalars['ID'];
  language?: Maybe<Scalars['String']>;
  lastName: Scalars['String'];
  notification?: Maybe<Scalars['Boolean']>;
  theme?: Maybe<Scalars['String']>;
  type: UserTypeEnum;
  username: Scalars['String'];
  email: Scalars['String'];
  signature?: Maybe<Scalars['String']>;
  alexaSkillLinked?: Maybe<Scalars['Boolean']>;
};

export type AnswerPaperInput = {
  id: Scalars['ID'];
  questionId: Scalars['ID'];
  answer: Scalars['String'];
};

export type Comment = {
  __typename?: 'Comment';
  createdAt: Scalars['String'];
  id: Scalars['ID'];
  text?: Maybe<Scalars['String']>;
  user: UserInterface;
};

/** An object that can have comments */
export type CommentableInterface = {
  comments: Array<Comment>;
  id: Scalars['ID'];
};

export type Company = {
  __typename?: 'Company';
  id: Scalars['String'];
  logo: Scalars['String'];
  name: Scalars['String'];
};

export type CreateCommentPayload = {
  __typename?: 'CreateCommentPayload';
  comment: Comment;
  commentable: CommentableInterface;
};

export type CreateTraineeInput = {
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  email: Scalars['String'];
  startDate: Scalars['String'];
  endDate: Scalars['String'];
  startOfToolUsage: Scalars['String'];
  companyId: Scalars['String'];
};

export type CreateTrainerInput = {
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
};

export type Day = CommentableInterface & {
  __typename?: 'Day';
  comments: Array<Comment>;
  createdAt: Scalars['String'];
  date: Scalars['String'];
  entries: Array<Entry>;
  id: Scalars['ID'];
  status?: Maybe<DayStatusEnum>;
};

export enum DayStatusEnum {
  /** workday */
  Work = 'work',
  /** vacation */
  Vacation = 'vacation',
  /** sick leave */
  Sick = 'sick',
  /** school/university */
  Education = 'education',
  /** public holiday */
  Holiday = 'holiday'
}

/** Autogenerated return type of DevSetUser */
export type DevSetUserPayload = {
  __typename?: 'DevSetUserPayload';
  user?: Maybe<UserInterface>;
};

export type Entry = CommentableInterface & {
  __typename?: 'Entry';
  comments: Array<Comment>;
  createdAt: Scalars['String'];
  id: Scalars['ID'];
  orderId: Scalars['Int'];
  text: Scalars['String'];
  time: Scalars['Int'];
};

export type EntryInput = {
  text: Scalars['String'];
  time: Scalars['Int'];
};

export type LaraConfig = {
  __typename?: 'LaraConfig';
  minWorkDayMinutes: Scalars['Int'];
  maxWorkDayMinutes: Scalars['Int'];
  expectedWorkDayMinutes: Scalars['Int'];
  minEducationDayMinutes: Scalars['Int'];
  maxEducationDayMinutes: Scalars['Int'];
  maxEntryMinutes: Scalars['Int'];
  maxPeriodYearsCount: Scalars['Int'];
  finishedWeekDayCount: Scalars['Int'];
};

export type Mentor = {
  __typename?: 'Mentor';
  name: Scalars['String'];
  email: Scalars['String'];
  signature: Scalars['String'];
};

export type MentorInput = {
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
};

export type MutateEntryPayload = {
  __typename?: 'MutateEntryPayload';
  day: Day;
  entry?: Maybe<Entry>;
  report: Report;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** [DEV] Login as a user. */
  _devloginuser?: Maybe<OAuthPayload>;
  /** [DEV] Sets the users type. */
  _devsetusertype: DevSetUserPayload;
  /** Claims a Trainee by the current Trainer */
  claimTrainee?: Maybe<TrainerTraineePayload>;
  /** Creates a new comment on a Day which is identified by the id argument. */
  createCommentOnDay: CreateCommentPayload;
  /** Creates a new comment on a Entry which is identified by the id argument. */
  createCommentOnEntry: CreateCommentPayload;
  /** Creates a new comment on a Report which is identified by the id argument. */
  createCommentOnReport: CreateCommentPayload;
  /** Creates a new entry which is assigned to the matching report based on the day Id */
  createEntry: MutateEntryPayload;
  /** Deletes an entry by the given ID. Only considers entries made by the current user. Returns the ID of the deleted entry. */
  deleteEntry: MutateEntryPayload;
  /** Login via google. */
  login?: Maybe<OAuthPayload>;
  /** Unclaims a Trainee by the current Trainer */
  unclaimTrainee?: Maybe<TrainerTraineePayload>;
  /** Updates the current trainee */
  updateCurrentTrainee?: Maybe<Trainee>;
  /** Updates the current user */
  updateCurrentUser?: Maybe<UserInterface>;
  /** Updates day which is identified by the id argument. */
  updateDay?: Maybe<Day>;
  updateEntry: MutateEntryPayload;
  updateEntryOrder: MutateEntryPayload;
  /** Updates report which is identified by the id argument. */
  updateReport?: Maybe<UpdateReportPayload>;
  /** Creates Trainee. */
  createTrainee?: Maybe<Trainee>;
  /** Creates Trainer. */
  createTrainer?: Maybe<Trainer>;
  /** Marks User to be deleted */
  markUserForDeletion?: Maybe<UserInterface>;
  /** Unmarks User from deletion */
  unmarkUserForDeletion?: Maybe<UserInterface>;
  /** Updates Trainee. */
  updateTrainee?: Maybe<Trainee>;
  /** Updates Trainer. */
  updateTrainer?: Maybe<Trainer>;
  /** Link Alexa account */
  linkAlexa?: Maybe<UserInterface>;
  /** Unlink Alexa account */
  unlinkAlexa?: Maybe<UserInterface>;
  /** Create OAuth Code */
  createOAuthCode: Scalars['String'];
  /** Create Paper */
  postPaper: Paper;
  /** Delete Paper */
  deletePaper: Scalars['Boolean'];
  /** Update Paper */
  answerPaper: PaperFormData;
};


export type Mutation_DevloginuserArgs = {
  id: Scalars['String'];
};


export type Mutation_DevsetusertypeArgs = {
  type: Scalars['String'];
};


export type MutationClaimTraineeArgs = {
  id: Scalars['ID'];
};


export type MutationCreateCommentOnDayArgs = {
  text: Scalars['String'];
  id: Scalars['ID'];
  traineeId: Scalars['ID'];
};


export type MutationCreateCommentOnEntryArgs = {
  text: Scalars['String'];
  id: Scalars['ID'];
  traineeId: Scalars['ID'];
};


export type MutationCreateCommentOnReportArgs = {
  text: Scalars['String'];
  id: Scalars['ID'];
  traineeId: Scalars['ID'];
};


export type MutationCreateEntryArgs = {
  dayId: Scalars['String'];
  input: EntryInput;
};


export type MutationDeleteEntryArgs = {
  id: Scalars['ID'];
};


export type MutationLoginArgs = {
  googleToken: Scalars['String'];
};


export type MutationUnclaimTraineeArgs = {
  id: Scalars['ID'];
};


export type MutationUpdateCurrentTraineeArgs = {
  input: UpdateCurrentTraineeInput;
};


export type MutationUpdateCurrentUserArgs = {
  input?: Maybe<UserInput>;
};


export type MutationUpdateDayArgs = {
  status?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};


export type MutationUpdateEntryArgs = {
  id: Scalars['ID'];
  input: EntryInput;
};


export type MutationUpdateEntryOrderArgs = {
  entryId: Scalars['ID'];
  dayId: Scalars['ID'];
  orderId: Scalars['Int'];
};


export type MutationUpdateReportArgs = {
  summary?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};


export type MutationCreateTraineeArgs = {
  input: CreateTraineeInput;
};


export type MutationCreateTrainerArgs = {
  input: CreateTrainerInput;
};


export type MutationMarkUserForDeletionArgs = {
  id: Scalars['ID'];
};


export type MutationUnmarkUserForDeletionArgs = {
  id: Scalars['ID'];
};


export type MutationUpdateTraineeArgs = {
  input: UpdateTraineeInput;
  id: Scalars['ID'];
};


export type MutationUpdateTrainerArgs = {
  input: UpdateTrainerInput;
  id: Scalars['ID'];
};


export type MutationLinkAlexaArgs = {
  code: Scalars['String'];
  state: Scalars['String'];
};


export type MutationPostPaperArgs = {
  input: PaperInput;
  id?: Maybe<Scalars['ID']>;
};


export type MutationDeletePaperArgs = {
  id: Scalars['ID'];
};


export type MutationAnswerPaperArgs = {
  input: AnswerPaperInput;
};

export type OAuthPayload = {
  __typename?: 'OAuthPayload';
  accessToken: Scalars['String'];
  refreshToken?: Maybe<Scalars['String']>;
  expiresIn: Scalars['Int'];
};

export type Paper = {
  __typename?: 'Paper';
  id: Scalars['ID'];
  trainee: Trainee;
  status: PaperStatus;
  traineeForm: Array<PaperFormData>;
  trainerForm: Array<PaperFormData>;
  conclusion?: Maybe<Scalars['String']>;
  archivedAt?: Maybe<Scalars['String']>;
  createdAt: Scalars['String'];
  client: Scalars['String'];
  mentor: Mentor;
  periodStart: Scalars['String'];
  periodEnd: Scalars['String'];
  subject: Scalars['String'];
};

export type PaperFormData = {
  __typename?: 'PaperFormData';
  id: Scalars['ID'];
  question: Scalars['String'];
  answer?: Maybe<Scalars['String']>;
  hint?: Maybe<Scalars['String']>;
};

export type PaperInput = {
  client?: Maybe<Scalars['String']>;
  mentor?: Maybe<MentorInput>;
  periodStart?: Maybe<Scalars['String']>;
  periodEnd?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  status?: Maybe<PaperStatus>;
};

export enum PaperStatus {
  InProgress = 'InProgress',
  TraineeDone = 'TraineeDone',
  MentorDone = 'MentorDone',
  InReview = 'InReview',
  Archived = 'Archived'
}

export type PrintPayload = {
  __typename?: 'PrintPayload';
  estimatedWaitingTime: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  config: LaraConfig;
  companies?: Maybe<Array<Company>>;
  /** Returns the logged in user. This user can be either a Trainee or a Trainer. */
  currentUser?: Maybe<UserInterface>;
  /** Finds the report for a specifig trainee on the requested year and week. */
  reportForTrainee?: Maybe<Report>;
  /** Finds the report for the requested year and week. */
  reportForYearAndWeek?: Maybe<Report>;
  /** Get all Reports for the current User. The result can be filtered by the 'statuses' attribut */
  reports: Array<Maybe<Report>>;
  /** Get all Suggestions */
  suggestions: Array<Scalars['String']>;
  /** Get all Trainees */
  trainees: Array<Trainee>;
  /** Get all Trainers */
  trainers: Array<Trainer>;
  /** Print single report or report batch */
  print: PrintPayload;
  /** Get a User by ID */
  getUser?: Maybe<UserInterface>;
  /** Will look for Users to delete */
  cleanup: Scalars['Boolean'];
  /** Get the alexa account linking url */
  alexaLinkingUrl?: Maybe<Scalars['String']>;
  /** Get the PAPER */
  getPaper?: Maybe<Paper>;
};


export type QueryReportForTraineeArgs = {
  year: Scalars['Int'];
  week: Scalars['Int'];
  id: Scalars['ID'];
};


export type QueryReportForYearAndWeekArgs = {
  year: Scalars['Int'];
  week: Scalars['Int'];
};


export type QueryReportsArgs = {
  statuses?: Maybe<Array<ReportStatus>>;
};


export type QueryPrintArgs = {
  ids: Array<Scalars['ID']>;
};


export type QueryGetUserArgs = {
  id: Scalars['ID'];
};


export type QueryGetPaperArgs = {
  id: Scalars['ID'];
  token?: Maybe<Scalars['String']>;
};

export type Report = CommentableInterface & {
  __typename?: 'Report';
  comments: Array<Comment>;
  createdAt: Scalars['String'];
  days: Array<Day>;
  department?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  status: ReportStatus;
  summary?: Maybe<Scalars['String']>;
  week: Scalars['Int'];
  year: Scalars['Int'];
  reportAccepted?: Maybe<Scalars['String']>;
  previousReportLink?: Maybe<Scalars['String']>;
  nextReportLink?: Maybe<Scalars['String']>;
};

/** Represents the current state of the report */
export enum ReportStatus {
  /** Report is open */
  Todo = 'todo',
  /** Passes the report to the trainer */
  Review = 'review',
  /** Used if there is any problem with a report */
  Reopened = 'reopened',
  /** Done reports are marked as archived */
  Archived = 'archived'
}

export type Trainee = UserInterface & {
  __typename?: 'Trainee';
  /** The url for the users avatar image. */
  avatar: Scalars['String'];
  company: Company;
  course?: Maybe<Scalars['String']>;
  createdAt: Scalars['String'];
  endDate?: Maybe<Scalars['String']>;
  endOfToolUsage?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  id: Scalars['ID'];
  language?: Maybe<Scalars['String']>;
  lastName: Scalars['String'];
  notification?: Maybe<Scalars['Boolean']>;
  reports: Array<Report>;
  signature?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['String']>;
  startOfToolUsage?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  trainer?: Maybe<Trainer>;
  type: UserTypeEnum;
  username: Scalars['String'];
  email: Scalars['String'];
  deleteAt?: Maybe<Scalars['String']>;
  openReportsCount: Scalars['Int'];
  alexaSkillLinked?: Maybe<Scalars['Boolean']>;
};

export type Trainer = UserInterface & {
  __typename?: 'Trainer';
  avatar: Scalars['String'];
  createdAt: Scalars['String'];
  firstName: Scalars['String'];
  id: Scalars['ID'];
  language?: Maybe<Scalars['String']>;
  lastName: Scalars['String'];
  notification?: Maybe<Scalars['Boolean']>;
  signature?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  trainees: Array<Trainee>;
  type: UserTypeEnum;
  username: Scalars['String'];
  email: Scalars['String'];
  deleteAt?: Maybe<Scalars['String']>;
  alexaSkillLinked?: Maybe<Scalars['Boolean']>;
};

export type TrainerTraineePayload = {
  __typename?: 'TrainerTraineePayload';
  trainee: Trainee;
  trainer: Trainer;
};

export type UpdateCurrentTraineeInput = {
  course?: Maybe<Scalars['String']>;
};

export type UpdateReportPayload = {
  __typename?: 'UpdateReportPayload';
  trainee: Trainee;
  report: Report;
};

export type UpdateTraineeInput = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['String']>;
  startOfToolUsage?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['String']>;
};

export type UpdateTrainerInput = {
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
};

export type UserInput = {
  language?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  notification?: Maybe<Scalars['Boolean']>;
};

export type UserInterface = {
  avatar: Scalars['String'];
  createdAt: Scalars['String'];
  firstName: Scalars['String'];
  id: Scalars['ID'];
  language?: Maybe<Scalars['String']>;
  lastName: Scalars['String'];
  notification?: Maybe<Scalars['Boolean']>;
  signature?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  type: UserTypeEnum;
  username: Scalars['String'];
  email: Scalars['String'];
  alexaSkillLinked?: Maybe<Scalars['Boolean']>;
};

export enum UserTypeEnum {
  /** User is a Trainee */
  Trainee = 'Trainee',
  /** User is a Trainer */
  Trainer = 'Trainer',
  /** User is an Admin */
  Admin = 'Admin'
}

export type ApplicationSettingsUpdateUserMutationVariables = Exact<{
  language?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  notification?: Maybe<Scalars['Boolean']>;
}>;


export type ApplicationSettingsUpdateUserMutation = (
  { __typename?: 'Mutation' }
  & { updateCurrentUser?: Maybe<(
    { __typename: 'Admin' }
    & Pick<Admin, 'language' | 'theme' | 'notification' | 'id'>
  ) | (
    { __typename: 'Trainee' }
    & Pick<Trainee, 'language' | 'theme' | 'notification' | 'id'>
  ) | (
    { __typename: 'Trainer' }
    & Pick<Trainer, 'language' | 'theme' | 'notification' | 'id'>
  )> }
);

export type ClaimTraineeMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ClaimTraineeMutation = (
  { __typename?: 'Mutation' }
  & { claimTrainee?: Maybe<(
    { __typename?: 'TrainerTraineePayload' }
    & { trainee: (
      { __typename?: 'Trainee' }
      & Pick<Trainee, 'id'>
      & { trainer?: Maybe<(
        { __typename?: 'Trainer' }
        & Pick<Trainer, 'id'>
      )> }
    ), trainer: (
      { __typename?: 'Trainer' }
      & Pick<Trainer, 'id'>
      & { trainees: Array<(
        { __typename?: 'Trainee' }
        & Pick<Trainee, 'id'>
      )> }
    ) }
  )> }
);

export type CreateCommentOnDayMutationVariables = Exact<{
  id: Scalars['ID'];
  text: Scalars['String'];
  traineeId: Scalars['ID'];
}>;


export type CreateCommentOnDayMutation = (
  { __typename?: 'Mutation' }
  & { createCommentOnDay: (
    { __typename?: 'CreateCommentPayload' }
    & { commentable: (
      { __typename?: 'Day' }
      & Pick<Day, 'id'>
      & { comments: Array<(
        { __typename?: 'Comment' }
        & Pick<Comment, 'id' | 'text'>
        & { user: (
          { __typename?: 'Admin' }
          & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainee' }
          & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainer' }
          & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) }
      )> }
    ) | { __typename?: 'Entry' } | { __typename?: 'Report' } }
  ) }
);

export type CreateCommentOnEntryMutationVariables = Exact<{
  id: Scalars['ID'];
  text: Scalars['String'];
  traineeId: Scalars['ID'];
}>;


export type CreateCommentOnEntryMutation = (
  { __typename?: 'Mutation' }
  & { createCommentOnEntry: (
    { __typename?: 'CreateCommentPayload' }
    & { commentable: { __typename?: 'Day' } | (
      { __typename?: 'Entry' }
      & Pick<Entry, 'id'>
      & { comments: Array<(
        { __typename?: 'Comment' }
        & Pick<Comment, 'id' | 'text'>
        & { user: (
          { __typename?: 'Admin' }
          & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainee' }
          & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainer' }
          & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) }
      )> }
    ) | { __typename?: 'Report' } }
  ) }
);

export type CreateCommentOnReportMutationVariables = Exact<{
  id: Scalars['ID'];
  text: Scalars['String'];
  traineeId: Scalars['ID'];
}>;


export type CreateCommentOnReportMutation = (
  { __typename?: 'Mutation' }
  & { createCommentOnReport: (
    { __typename?: 'CreateCommentPayload' }
    & { commentable: { __typename?: 'Day' } | { __typename?: 'Entry' } | (
      { __typename?: 'Report' }
      & Pick<Report, 'id'>
      & { comments: Array<(
        { __typename?: 'Comment' }
        & Pick<Comment, 'id' | 'text'>
        & { user: (
          { __typename?: 'Admin' }
          & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainee' }
          & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainer' }
          & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) }
      )> }
    ) }
  ) }
);

export type CreateEntryMutationVariables = Exact<{
  dayId: Scalars['String'];
  input: EntryInput;
}>;


export type CreateEntryMutation = (
  { __typename?: 'Mutation' }
  & { createEntry: (
    { __typename?: 'MutateEntryPayload' }
    & { day: (
      { __typename: 'Day' }
      & Pick<Day, 'id'>
      & { entries: Array<(
        { __typename?: 'Entry' }
        & Pick<Entry, 'id' | 'text' | 'time' | 'orderId'>
        & { comments: Array<(
          { __typename?: 'Comment' }
          & Pick<Comment, 'id'>
        )> }
      )> }
    ) }
  ) }
);

export type CreateOAuthCodeMutationVariables = Exact<{ [key: string]: never; }>;


export type CreateOAuthCodeMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'createOAuthCode'>
);

export type CreateTraineeMutationVariables = Exact<{
  input: CreateTraineeInput;
}>;


export type CreateTraineeMutation = (
  { __typename?: 'Mutation' }
  & { createTrainee?: Maybe<(
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'startDate' | 'startOfToolUsage' | 'endDate' | 'course' | 'avatar' | 'firstName' | 'lastName' | 'email' | 'type' | 'deleteAt'>
    & { company: (
      { __typename?: 'Company' }
      & Pick<Company, 'id'>
    ) }
  )> }
);

export type CreateTrainerMutationVariables = Exact<{
  input: CreateTrainerInput;
}>;


export type CreateTrainerMutation = (
  { __typename?: 'Mutation' }
  & { createTrainer?: Maybe<(
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'avatar' | 'firstName' | 'lastName' | 'email' | 'type'>
  )> }
);

export type DayStatusSelectUpdateDayMutationVariables = Exact<{
  id: Scalars['ID'];
  status?: Maybe<Scalars['String']>;
}>;


export type DayStatusSelectUpdateDayMutation = (
  { __typename?: 'Mutation' }
  & { updateDay?: Maybe<(
    { __typename: 'Day' }
    & Pick<Day, 'id' | 'status'>
  )> }
);

export type DebugLoginMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DebugLoginMutation = (
  { __typename?: 'Mutation' }
  & { _devloginuser?: Maybe<(
    { __typename?: 'OAuthPayload' }
    & Pick<OAuthPayload, 'accessToken' | 'refreshToken' | 'expiresIn'>
  )> }
);

export type DebugSetUsertypeMutationVariables = Exact<{
  usertype: Scalars['String'];
}>;


export type DebugSetUsertypeMutation = (
  { __typename?: 'Mutation' }
  & { _devsetusertype: (
    { __typename?: 'DevSetUserPayload' }
    & { user?: Maybe<(
      { __typename: 'Admin' }
      & Pick<Admin, 'id'>
    ) | (
      { __typename: 'Trainee' }
      & Pick<Trainee, 'id'>
    ) | (
      { __typename: 'Trainer' }
      & Pick<Trainer, 'id'>
    )> }
  ) }
);

export type DeleteEntryMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteEntryMutation = (
  { __typename?: 'Mutation' }
  & { deleteEntry: (
    { __typename?: 'MutateEntryPayload' }
    & { day: (
      { __typename: 'Day' }
      & Pick<Day, 'id'>
      & { entries: Array<(
        { __typename?: 'Entry' }
        & Pick<Entry, 'id'>
      )> }
    ) }
  ) }
);

export type LinkAlexaMutationVariables = Exact<{
  code: Scalars['String'];
  state: Scalars['String'];
}>;


export type LinkAlexaMutation = (
  { __typename?: 'Mutation' }
  & { linkAlexa?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'alexaSkillLinked'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'alexaSkillLinked'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'alexaSkillLinked'>
  )> }
);

export type LoginPageLoginMutationVariables = Exact<{
  token: Scalars['String'];
}>;


export type LoginPageLoginMutation = (
  { __typename?: 'Mutation' }
  & { login?: Maybe<(
    { __typename?: 'OAuthPayload' }
    & Pick<OAuthPayload, 'accessToken' | 'refreshToken' | 'expiresIn'>
  )> }
);

export type MarkUserForDeleteMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type MarkUserForDeleteMutation = (
  { __typename?: 'Mutation' }
  & { markUserForDeletion?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'deleteAt' | 'id'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'deleteAt' | 'id'>
  )> }
);

export type SignatureSettingsUpdateSignatureMutationVariables = Exact<{
  signature?: Maybe<Scalars['String']>;
}>;


export type SignatureSettingsUpdateSignatureMutation = (
  { __typename?: 'Mutation' }
  & { updateCurrentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'signature'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'signature'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'signature'>
  )> }
);

export type TraineeSettingsUpdateTraineeMutationVariables = Exact<{
  course?: Maybe<Scalars['String']>;
}>;


export type TraineeSettingsUpdateTraineeMutation = (
  { __typename?: 'Mutation' }
  & { updateCurrentTrainee?: Maybe<(
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'course'>
  )> }
);

export type UnclaimTraineeMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type UnclaimTraineeMutation = (
  { __typename?: 'Mutation' }
  & { unclaimTrainee?: Maybe<(
    { __typename?: 'TrainerTraineePayload' }
    & { trainee: (
      { __typename?: 'Trainee' }
      & Pick<Trainee, 'id'>
      & { trainer?: Maybe<(
        { __typename?: 'Trainer' }
        & Pick<Trainer, 'id'>
      )> }
    ), trainer: (
      { __typename?: 'Trainer' }
      & Pick<Trainer, 'id'>
      & { trainees: Array<(
        { __typename?: 'Trainee' }
        & Pick<Trainee, 'id'>
      )> }
    ) }
  )> }
);

export type UnlinkAlexaMutationVariables = Exact<{ [key: string]: never; }>;


export type UnlinkAlexaMutation = (
  { __typename?: 'Mutation' }
  & { unlinkAlexa?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'alexaSkillLinked'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'alexaSkillLinked'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'alexaSkillLinked'>
  )> }
);

export type UnmarkUserForDeleteMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type UnmarkUserForDeleteMutation = (
  { __typename?: 'Mutation' }
  & { unmarkUserForDeletion?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'deleteAt' | 'id'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'deleteAt' | 'id'>
  )> }
);

export type UpdateEntryOrderMutationVariables = Exact<{
  entryId: Scalars['ID'];
  dayId: Scalars['ID'];
  orderId: Scalars['Int'];
}>;


export type UpdateEntryOrderMutation = (
  { __typename?: 'Mutation' }
  & { updateEntryOrder: (
    { __typename?: 'MutateEntryPayload' }
    & { entry?: Maybe<(
      { __typename?: 'Entry' }
      & Pick<Entry, 'id' | 'orderId'>
    )>, day: (
      { __typename?: 'Day' }
      & Pick<Day, 'id'>
      & { entries: Array<(
        { __typename?: 'Entry' }
        & Pick<Entry, 'id' | 'orderId'>
      )> }
    ), report: (
      { __typename?: 'Report' }
      & Pick<Report, 'id'>
      & { days: Array<(
        { __typename?: 'Day' }
        & Pick<Day, 'id'>
        & { entries: Array<(
          { __typename?: 'Entry' }
          & Pick<Entry, 'id' | 'orderId'>
        )> }
      )> }
    ) }
  ) }
);

export type UpdateEntryMutationVariables = Exact<{
  id: Scalars['ID'];
  input: EntryInput;
}>;


export type UpdateEntryMutation = (
  { __typename?: 'Mutation' }
  & { updateEntry: (
    { __typename?: 'MutateEntryPayload' }
    & { entry?: Maybe<(
      { __typename?: 'Entry' }
      & Pick<Entry, 'id' | 'time' | 'text'>
    )> }
  ) }
);

export type UpdateReportReportReviewPageMutationVariables = Exact<{
  id: Scalars['ID'];
  summary?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
}>;


export type UpdateReportReportReviewPageMutation = (
  { __typename?: 'Mutation' }
  & { updateReport?: Maybe<(
    { __typename?: 'UpdateReportPayload' }
    & { report: (
      { __typename?: 'Report' }
      & Pick<Report, 'id' | 'summary' | 'department' | 'status'>
    ), trainee: (
      { __typename?: 'Trainee' }
      & Pick<Trainee, 'id' | 'openReportsCount'>
    ) }
  )> }
);

export type UpdateReportMutationVariables = Exact<{
  id: Scalars['ID'];
  summary?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
}>;


export type UpdateReportMutation = (
  { __typename?: 'Mutation' }
  & { updateReport?: Maybe<(
    { __typename?: 'UpdateReportPayload' }
    & { report: (
      { __typename?: 'Report' }
      & Pick<Report, 'id' | 'summary' | 'department' | 'status'>
    ) }
  )> }
);

export type UpdateTraineeMutationVariables = Exact<{
  input: UpdateTraineeInput;
  id: Scalars['ID'];
}>;


export type UpdateTraineeMutation = (
  { __typename?: 'Mutation' }
  & { updateTrainee?: Maybe<(
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'startDate' | 'startOfToolUsage' | 'endDate' | 'firstName' | 'lastName' | 'email' | 'avatar'>
    & { company: (
      { __typename?: 'Company' }
      & Pick<Company, 'id'>
    ) }
  )> }
);

export type UpdateTrainerMutationVariables = Exact<{
  input: UpdateTrainerInput;
  id: Scalars['ID'];
}>;


export type UpdateTrainerMutation = (
  { __typename?: 'Mutation' }
  & { updateTrainer?: Maybe<(
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'email' | 'avatar' | 'type'>
  )> }
);

export type AdminTraineesPageQueryVariables = Exact<{ [key: string]: never; }>;


export type AdminTraineesPageQuery = (
  { __typename?: 'Query' }
  & { trainees: Array<(
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar' | 'deleteAt'>
  )>, companies?: Maybe<Array<(
    { __typename?: 'Company' }
    & Pick<Company, 'id' | 'name'>
  )>> }
);

export type AdminTrainersPageQueryVariables = Exact<{ [key: string]: never; }>;


export type AdminTrainersPageQuery = (
  { __typename?: 'Query' }
  & { trainers: Array<(
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar' | 'deleteAt'>
  )> }
);

export type AlexaLinkingUrlQueryVariables = Exact<{ [key: string]: never; }>;


export type AlexaLinkingUrlQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'alexaLinkingUrl'>
);

export type ArchivePageDataQueryVariables = Exact<{ [key: string]: never; }>;


export type ArchivePageDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'theme' | 'firstName' | 'lastName' | 'language'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'theme' | 'firstName' | 'lastName' | 'language'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'theme' | 'firstName' | 'lastName' | 'language'>
  )>, reports: Array<Maybe<(
    { __typename: 'Report' }
    & Pick<Report, 'id' | 'week' | 'year' | 'status' | 'department'>
    & { days: Array<(
      { __typename?: 'Day' }
      & Pick<Day, 'status'>
      & { entries: Array<(
        { __typename?: 'Entry' }
        & Pick<Entry, 'id' | 'time'>
      )> }
    )> }
  )>> }
);

export type CommentBoxDataQueryVariables = Exact<{ [key: string]: never; }>;


export type CommentBoxDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id'>
  )> }
);

export type ConfigQueryVariables = Exact<{ [key: string]: never; }>;


export type ConfigQuery = (
  { __typename?: 'Query' }
  & { config: (
    { __typename?: 'LaraConfig' }
    & Pick<LaraConfig, 'minWorkDayMinutes' | 'maxWorkDayMinutes' | 'expectedWorkDayMinutes' | 'minEducationDayMinutes' | 'maxEducationDayMinutes' | 'maxEntryMinutes' | 'maxPeriodYearsCount' | 'finishedWeekDayCount'>
  ) }
);

export type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'language' | 'theme' | 'type'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'startDate' | 'endDate' | 'course' | 'id' | 'language' | 'theme' | 'type'>
    & { company: (
      { __typename?: 'Company' }
      & Pick<Company, 'id'>
    ) }
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'language' | 'theme' | 'type'>
    & { trainees: Array<(
      { __typename?: 'Trainee' }
      & Pick<Trainee, 'id'>
    )> }
  )> }
);

export type DashboardPageDataQueryVariables = Exact<{
  currentYear: Scalars['Int'];
  currentWeek: Scalars['Int'];
}>;


export type DashboardPageDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'theme'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'theme'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'theme'>
  )>, reports: Array<Maybe<(
    { __typename: 'Report' }
    & Pick<Report, 'id' | 'week' | 'year' | 'status' | 'department'>
    & { days: Array<(
      { __typename?: 'Day' }
      & Pick<Day, 'status'>
      & { entries: Array<(
        { __typename?: 'Entry' }
        & Pick<Entry, 'id' | 'time'>
      )> }
    )> }
  )>>, reportForYearAndWeek?: Maybe<(
    { __typename?: 'Report' }
    & Pick<Report, 'id' | 'status'>
    & { days: Array<(
      { __typename?: 'Day' }
      & Pick<Day, 'status' | 'date' | 'id'>
      & { entries: Array<(
        { __typename?: 'Entry' }
        & Pick<Entry, 'id' | 'text' | 'time' | 'orderId'>
        & { comments: Array<(
          { __typename?: 'Comment' }
          & Pick<Comment, 'id'>
          & { user: (
            { __typename?: 'Admin' }
            & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
          ) | (
            { __typename?: 'Trainee' }
            & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
          ) | (
            { __typename?: 'Trainer' }
            & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
          ) }
        )> }
      )>, comments: Array<(
        { __typename?: 'Comment' }
        & Pick<Comment, 'id' | 'text'>
        & { user: (
          { __typename?: 'Admin' }
          & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainee' }
          & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainer' }
          & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) }
      )> }
    )> }
  )> }
);

export type DayInputDataQueryVariables = Exact<{ [key: string]: never; }>;


export type DayInputDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar' | 'type'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar' | 'type'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar' | 'type'>
  )> }
);

export type EntryInputDataQueryVariables = Exact<{ [key: string]: never; }>;


export type EntryInputDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'type' | 'firstName' | 'lastName' | 'avatar' | 'username'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'type' | 'firstName' | 'lastName' | 'avatar' | 'username'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'type' | 'firstName' | 'lastName' | 'avatar' | 'username'>
  )> }
);

export type UserPageQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type UserPageQuery = (
  { __typename?: 'Query' }
  & { getUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'avatar' | 'firstName' | 'lastName' | 'email' | 'type'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'startDate' | 'startOfToolUsage' | 'endDate' | 'deleteAt' | 'course' | 'id' | 'avatar' | 'firstName' | 'lastName' | 'email' | 'type'>
    & { company: (
      { __typename?: 'Company' }
      & Pick<Company, 'id'>
    ), trainer?: Maybe<(
      { __typename?: 'Trainer' }
      & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
    )> }
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'deleteAt' | 'id' | 'avatar' | 'firstName' | 'lastName' | 'email' | 'type'>
    & { trainees: Array<(
      { __typename?: 'Trainee' }
      & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
    )> }
  )>, companies?: Maybe<Array<(
    { __typename?: 'Company' }
    & Pick<Company, 'id' | 'name'>
  )>> }
);

export type NavigationDataQueryVariables = Exact<{ [key: string]: never; }>;


export type NavigationDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename: 'Admin' }
    & Pick<Admin, 'type' | 'id' | 'firstName' | 'lastName' | 'avatar'>
  ) | (
    { __typename: 'Trainee' }
    & Pick<Trainee, 'type' | 'id' | 'firstName' | 'lastName' | 'avatar'>
  ) | (
    { __typename: 'Trainer' }
    & Pick<Trainer, 'type' | 'id' | 'firstName' | 'lastName' | 'avatar'>
  )> }
);

export type OnboardingPageDataQueryVariables = Exact<{ [key: string]: never; }>;


export type OnboardingPageDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'firstName'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'firstName'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'firstName'>
  )> }
);

export type PrintDataQueryVariables = Exact<{
  ids: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type PrintDataQuery = (
  { __typename?: 'Query' }
  & { print: (
    { __typename?: 'PrintPayload' }
    & Pick<PrintPayload, 'estimatedWaitingTime'>
  ) }
);

export type ReportPageDataQueryVariables = Exact<{
  year: Scalars['Int'];
  week: Scalars['Int'];
}>;


export type ReportPageDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar' | 'username'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'startOfToolUsage' | 'endOfToolUsage' | 'id' | 'firstName' | 'lastName' | 'avatar' | 'username'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar' | 'username'>
  )>, reportForYearAndWeek?: Maybe<(
    { __typename?: 'Report' }
    & Pick<Report, 'id' | 'week' | 'year' | 'summary' | 'department' | 'status' | 'previousReportLink' | 'nextReportLink'>
    & { comments: Array<(
      { __typename?: 'Comment' }
      & Pick<Comment, 'id' | 'text'>
      & { user: (
        { __typename?: 'Admin' }
        & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
      ) | (
        { __typename?: 'Trainee' }
        & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
      ) | (
        { __typename?: 'Trainer' }
        & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
      ) }
    )>, days: Array<(
      { __typename?: 'Day' }
      & Pick<Day, 'status' | 'date' | 'id'>
      & { comments: Array<(
        { __typename?: 'Comment' }
        & Pick<Comment, 'id' | 'text'>
        & { user: (
          { __typename?: 'Admin' }
          & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainee' }
          & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainer' }
          & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) }
      )>, entries: Array<(
        { __typename?: 'Entry' }
        & Pick<Entry, 'id' | 'text' | 'time' | 'orderId'>
        & { comments: Array<(
          { __typename?: 'Comment' }
          & Pick<Comment, 'id' | 'text'>
          & { user: (
            { __typename?: 'Admin' }
            & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
          ) | (
            { __typename?: 'Trainee' }
            & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
          ) | (
            { __typename?: 'Trainer' }
            & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
          ) }
        )> }
      )> }
    )> }
  )> }
);

export type ReportReviewPageDataQueryVariables = Exact<{
  year: Scalars['Int'];
  week: Scalars['Int'];
  trainee: Scalars['ID'];
}>;


export type ReportReviewPageDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar' | 'username'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar' | 'username'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar' | 'username'>
  )>, reportForTrainee?: Maybe<(
    { __typename?: 'Report' }
    & Pick<Report, 'id' | 'week' | 'year' | 'summary' | 'department' | 'status'>
    & { comments: Array<(
      { __typename?: 'Comment' }
      & Pick<Comment, 'id' | 'text'>
      & { user: (
        { __typename?: 'Admin' }
        & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
      ) | (
        { __typename?: 'Trainee' }
        & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
      ) | (
        { __typename?: 'Trainer' }
        & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
      ) }
    )>, days: Array<(
      { __typename?: 'Day' }
      & Pick<Day, 'status' | 'date' | 'id'>
      & { entries: Array<(
        { __typename?: 'Entry' }
        & Pick<Entry, 'id' | 'text' | 'time' | 'orderId'>
        & { comments: Array<(
          { __typename?: 'Comment' }
          & Pick<Comment, 'id' | 'text'>
          & { user: (
            { __typename?: 'Admin' }
            & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
          ) | (
            { __typename?: 'Trainee' }
            & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
          ) | (
            { __typename?: 'Trainer' }
            & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
          ) }
        )> }
      )>, comments: Array<(
        { __typename?: 'Comment' }
        & Pick<Comment, 'id' | 'text'>
        & { user: (
          { __typename?: 'Admin' }
          & Pick<Admin, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainee' }
          & Pick<Trainee, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) | (
          { __typename?: 'Trainer' }
          & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
        ) }
      )> }
    )> }
  )> }
);

export type SettingsPageDataQueryVariables = Exact<{ [key: string]: never; }>;


export type SettingsPageDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'type' | 'language' | 'theme' | 'notification'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'startDate' | 'endDate' | 'course' | 'alexaSkillLinked' | 'id' | 'type' | 'language' | 'theme' | 'notification'>
    & { company: (
      { __typename?: 'Company' }
      & Pick<Company, 'id' | 'name'>
    ) }
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'type' | 'language' | 'theme' | 'notification'>
  )>, companies?: Maybe<Array<(
    { __typename?: 'Company' }
    & Pick<Company, 'id' | 'name'>
  )>> }
);

export type SignatureSettingsDataQueryVariables = Exact<{ [key: string]: never; }>;


export type SignatureSettingsDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'signature'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'signature'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'signature'>
  )> }
);

export type SuggestionsDataQueryVariables = Exact<{ [key: string]: never; }>;


export type SuggestionsDataQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'suggestions'>
);

export type TraineePageDataQueryVariables = Exact<{ [key: string]: never; }>;


export type TraineePageDataQuery = (
  { __typename?: 'Query' }
  & { trainees: Array<(
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'username' | 'firstName' | 'lastName' | 'course' | 'avatar' | 'startDate'>
    & { trainer?: Maybe<(
      { __typename?: 'Trainer' }
      & Pick<Trainer, 'id' | 'firstName' | 'lastName'>
    )>, company: (
      { __typename?: 'Company' }
      & Pick<Company, 'id' | 'name'>
    ) }
  )>, currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id'>
  )> }
);

export type TraineeSettingsDataQueryVariables = Exact<{ [key: string]: never; }>;


export type TraineeSettingsDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<{ __typename?: 'Admin' } | (
    { __typename: 'Trainee' }
    & Pick<Trainee, 'id' | 'startDate' | 'endDate' | 'course'>
    & { company: (
      { __typename?: 'Company' }
      & Pick<Company, 'id' | 'name'>
    ), trainer?: Maybe<(
      { __typename?: 'Trainer' }
      & Pick<Trainer, 'firstName' | 'lastName' | 'avatar'>
    )> }
  ) | { __typename?: 'Trainer' }> }
);

export type TrainerReportsPageDataQueryVariables = Exact<{ [key: string]: never; }>;


export type TrainerReportsPageDataQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'Admin' }
    & Pick<Admin, 'id' | 'theme'>
  ) | (
    { __typename?: 'Trainee' }
    & Pick<Trainee, 'id' | 'theme'>
  ) | (
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'theme'>
    & { trainees: Array<(
      { __typename?: 'Trainee' }
      & Pick<Trainee, 'username' | 'firstName' | 'lastName' | 'id' | 'avatar' | 'openReportsCount'>
      & { reports: Array<(
        { __typename?: 'Report' }
        & Pick<Report, 'id' | 'status' | 'week' | 'year'>
        & { days: Array<(
          { __typename?: 'Day' }
          & Pick<Day, 'status'>
        )> }
      )> }
    )> }
  )> }
);

export type TrainersPageQueryVariables = Exact<{ [key: string]: never; }>;


export type TrainersPageQuery = (
  { __typename?: 'Query' }
  & { trainers: Array<(
    { __typename?: 'Trainer' }
    & Pick<Trainer, 'id' | 'firstName' | 'lastName' | 'avatar'>
  )> }
);


export const ApplicationSettingsUpdateUserDocument = gql`
    mutation ApplicationSettingsUpdateUser($language: String, $theme: String, $notification: Boolean) {
  updateCurrentUser(
    input: {language: $language, theme: $theme, notification: $notification}
  ) {
    language
    theme
    notification
    __typename
    id
  }
}
    `;
export function useApplicationSettingsUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<ApplicationSettingsUpdateUserMutation, ApplicationSettingsUpdateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ApplicationSettingsUpdateUserMutation, ApplicationSettingsUpdateUserMutationVariables>(ApplicationSettingsUpdateUserDocument, options);
      }
export type ApplicationSettingsUpdateUserMutationHookResult = ReturnType<typeof useApplicationSettingsUpdateUserMutation>;
export const ClaimTraineeDocument = gql`
    mutation claimTrainee($id: ID!) {
  claimTrainee(id: $id) {
    trainee {
      id
      trainer {
        id
      }
    }
    trainer {
      id
      trainees {
        id
      }
    }
  }
}
    `;
export function useClaimTraineeMutation(baseOptions?: Apollo.MutationHookOptions<ClaimTraineeMutation, ClaimTraineeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ClaimTraineeMutation, ClaimTraineeMutationVariables>(ClaimTraineeDocument, options);
      }
export type ClaimTraineeMutationHookResult = ReturnType<typeof useClaimTraineeMutation>;
export const CreateCommentOnDayDocument = gql`
    mutation createCommentOnDay($id: ID!, $text: String!, $traineeId: ID!) {
  createCommentOnDay(id: $id, text: $text, traineeId: $traineeId) {
    commentable {
      ... on Day {
        id
        comments {
          id
          text
          user {
            id
            firstName
            lastName
            avatar
          }
        }
      }
    }
  }
}
    `;
export function useCreateCommentOnDayMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentOnDayMutation, CreateCommentOnDayMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCommentOnDayMutation, CreateCommentOnDayMutationVariables>(CreateCommentOnDayDocument, options);
      }
export type CreateCommentOnDayMutationHookResult = ReturnType<typeof useCreateCommentOnDayMutation>;
export const CreateCommentOnEntryDocument = gql`
    mutation createCommentOnEntry($id: ID!, $text: String!, $traineeId: ID!) {
  createCommentOnEntry(id: $id, text: $text, traineeId: $traineeId) {
    commentable {
      ... on Entry {
        id
        comments {
          id
          text
          user {
            id
            firstName
            lastName
            avatar
          }
        }
      }
    }
  }
}
    `;
export function useCreateCommentOnEntryMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentOnEntryMutation, CreateCommentOnEntryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCommentOnEntryMutation, CreateCommentOnEntryMutationVariables>(CreateCommentOnEntryDocument, options);
      }
export type CreateCommentOnEntryMutationHookResult = ReturnType<typeof useCreateCommentOnEntryMutation>;
export const CreateCommentOnReportDocument = gql`
    mutation createCommentOnReport($id: ID!, $text: String!, $traineeId: ID!) {
  createCommentOnReport(id: $id, text: $text, traineeId: $traineeId) {
    commentable {
      ... on Report {
        id
        comments {
          id
          text
          user {
            id
            firstName
            lastName
            avatar
          }
        }
      }
    }
  }
}
    `;
export function useCreateCommentOnReportMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentOnReportMutation, CreateCommentOnReportMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCommentOnReportMutation, CreateCommentOnReportMutationVariables>(CreateCommentOnReportDocument, options);
      }
export type CreateCommentOnReportMutationHookResult = ReturnType<typeof useCreateCommentOnReportMutation>;
export const CreateEntryDocument = gql`
    mutation createEntry($dayId: String!, $input: EntryInput!) {
  createEntry(input: $input, dayId: $dayId) {
    day {
      id
      __typename
      entries {
        id
        text
        time
        orderId
        comments {
          id
        }
      }
    }
  }
}
    `;
export function useCreateEntryMutation(baseOptions?: Apollo.MutationHookOptions<CreateEntryMutation, CreateEntryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateEntryMutation, CreateEntryMutationVariables>(CreateEntryDocument, options);
      }
export type CreateEntryMutationHookResult = ReturnType<typeof useCreateEntryMutation>;
export const CreateOAuthCodeDocument = gql`
    mutation createOAuthCode {
  createOAuthCode
}
    `;
export function useCreateOAuthCodeMutation(baseOptions?: Apollo.MutationHookOptions<CreateOAuthCodeMutation, CreateOAuthCodeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateOAuthCodeMutation, CreateOAuthCodeMutationVariables>(CreateOAuthCodeDocument, options);
      }
export type CreateOAuthCodeMutationHookResult = ReturnType<typeof useCreateOAuthCodeMutation>;
export const CreateTraineeDocument = gql`
    mutation CreateTrainee($input: CreateTraineeInput!) {
  createTrainee(input: $input) {
    id
    company {
      id
    }
    startDate
    startOfToolUsage
    endDate
    course
    avatar
    firstName
    lastName
    email
    type
    deleteAt
  }
}
    `;
export function useCreateTraineeMutation(baseOptions?: Apollo.MutationHookOptions<CreateTraineeMutation, CreateTraineeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateTraineeMutation, CreateTraineeMutationVariables>(CreateTraineeDocument, options);
      }
export type CreateTraineeMutationHookResult = ReturnType<typeof useCreateTraineeMutation>;
export const CreateTrainerDocument = gql`
    mutation CreateTrainer($input: CreateTrainerInput!) {
  createTrainer(input: $input) {
    id
    avatar
    firstName
    lastName
    email
    type
  }
}
    `;
export function useCreateTrainerMutation(baseOptions?: Apollo.MutationHookOptions<CreateTrainerMutation, CreateTrainerMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateTrainerMutation, CreateTrainerMutationVariables>(CreateTrainerDocument, options);
      }
export type CreateTrainerMutationHookResult = ReturnType<typeof useCreateTrainerMutation>;
export const DayStatusSelectUpdateDayDocument = gql`
    mutation DayStatusSelectUpdateDay($id: ID!, $status: String) {
  updateDay(id: $id, status: $status) {
    id
    status
    __typename
  }
}
    `;
export function useDayStatusSelectUpdateDayMutation(baseOptions?: Apollo.MutationHookOptions<DayStatusSelectUpdateDayMutation, DayStatusSelectUpdateDayMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DayStatusSelectUpdateDayMutation, DayStatusSelectUpdateDayMutationVariables>(DayStatusSelectUpdateDayDocument, options);
      }
export type DayStatusSelectUpdateDayMutationHookResult = ReturnType<typeof useDayStatusSelectUpdateDayMutation>;
export const DebugLoginDocument = gql`
    mutation DebugLogin($id: String!) {
  _devloginuser(id: $id) {
    accessToken
    refreshToken
    expiresIn
  }
}
    `;
export function useDebugLoginMutation(baseOptions?: Apollo.MutationHookOptions<DebugLoginMutation, DebugLoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DebugLoginMutation, DebugLoginMutationVariables>(DebugLoginDocument, options);
      }
export type DebugLoginMutationHookResult = ReturnType<typeof useDebugLoginMutation>;
export const DebugSetUsertypeDocument = gql`
    mutation DebugSetUsertype($usertype: String!) {
  _devsetusertype(type: $usertype) {
    user {
      id
      __typename
    }
  }
}
    `;
export function useDebugSetUsertypeMutation(baseOptions?: Apollo.MutationHookOptions<DebugSetUsertypeMutation, DebugSetUsertypeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DebugSetUsertypeMutation, DebugSetUsertypeMutationVariables>(DebugSetUsertypeDocument, options);
      }
export type DebugSetUsertypeMutationHookResult = ReturnType<typeof useDebugSetUsertypeMutation>;
export const DeleteEntryDocument = gql`
    mutation deleteEntry($id: ID!) {
  deleteEntry(id: $id) {
    day {
      id
      __typename
      entries {
        id
      }
    }
  }
}
    `;
export function useDeleteEntryMutation(baseOptions?: Apollo.MutationHookOptions<DeleteEntryMutation, DeleteEntryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteEntryMutation, DeleteEntryMutationVariables>(DeleteEntryDocument, options);
      }
export type DeleteEntryMutationHookResult = ReturnType<typeof useDeleteEntryMutation>;
export const LinkAlexaDocument = gql`
    mutation linkAlexa($code: String!, $state: String!) {
  linkAlexa(code: $code, state: $state) {
    id
    alexaSkillLinked
  }
}
    `;
export function useLinkAlexaMutation(baseOptions?: Apollo.MutationHookOptions<LinkAlexaMutation, LinkAlexaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LinkAlexaMutation, LinkAlexaMutationVariables>(LinkAlexaDocument, options);
      }
export type LinkAlexaMutationHookResult = ReturnType<typeof useLinkAlexaMutation>;
export const LoginPageLoginDocument = gql`
    mutation LoginPageLogin($token: String!) {
  login(googleToken: $token) {
    accessToken
    refreshToken
    expiresIn
  }
}
    `;
export function useLoginPageLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginPageLoginMutation, LoginPageLoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoginPageLoginMutation, LoginPageLoginMutationVariables>(LoginPageLoginDocument, options);
      }
export type LoginPageLoginMutationHookResult = ReturnType<typeof useLoginPageLoginMutation>;
export const MarkUserForDeleteDocument = gql`
    mutation MarkUserForDelete($id: ID!) {
  markUserForDeletion(id: $id) {
    id
    ... on Trainee {
      deleteAt
    }
    ... on Trainer {
      deleteAt
    }
  }
}
    `;
export function useMarkUserForDeleteMutation(baseOptions?: Apollo.MutationHookOptions<MarkUserForDeleteMutation, MarkUserForDeleteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MarkUserForDeleteMutation, MarkUserForDeleteMutationVariables>(MarkUserForDeleteDocument, options);
      }
export type MarkUserForDeleteMutationHookResult = ReturnType<typeof useMarkUserForDeleteMutation>;
export const SignatureSettingsUpdateSignatureDocument = gql`
    mutation SignatureSettingsUpdateSignature($signature: String) {
  updateCurrentUser(input: {signature: $signature}) {
    id
    signature
  }
}
    `;
export function useSignatureSettingsUpdateSignatureMutation(baseOptions?: Apollo.MutationHookOptions<SignatureSettingsUpdateSignatureMutation, SignatureSettingsUpdateSignatureMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SignatureSettingsUpdateSignatureMutation, SignatureSettingsUpdateSignatureMutationVariables>(SignatureSettingsUpdateSignatureDocument, options);
      }
export type SignatureSettingsUpdateSignatureMutationHookResult = ReturnType<typeof useSignatureSettingsUpdateSignatureMutation>;
export const TraineeSettingsUpdateTraineeDocument = gql`
    mutation TraineeSettingsUpdateTrainee($course: String) {
  updateCurrentTrainee(input: {course: $course}) {
    id
    course
  }
}
    `;
export function useTraineeSettingsUpdateTraineeMutation(baseOptions?: Apollo.MutationHookOptions<TraineeSettingsUpdateTraineeMutation, TraineeSettingsUpdateTraineeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<TraineeSettingsUpdateTraineeMutation, TraineeSettingsUpdateTraineeMutationVariables>(TraineeSettingsUpdateTraineeDocument, options);
      }
export type TraineeSettingsUpdateTraineeMutationHookResult = ReturnType<typeof useTraineeSettingsUpdateTraineeMutation>;
export const UnclaimTraineeDocument = gql`
    mutation unclaimTrainee($id: ID!) {
  unclaimTrainee(id: $id) {
    trainee {
      id
      trainer {
        id
      }
    }
    trainer {
      id
      trainees {
        id
      }
    }
  }
}
    `;
export function useUnclaimTraineeMutation(baseOptions?: Apollo.MutationHookOptions<UnclaimTraineeMutation, UnclaimTraineeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UnclaimTraineeMutation, UnclaimTraineeMutationVariables>(UnclaimTraineeDocument, options);
      }
export type UnclaimTraineeMutationHookResult = ReturnType<typeof useUnclaimTraineeMutation>;
export const UnlinkAlexaDocument = gql`
    mutation unlinkAlexa {
  unlinkAlexa {
    id
    alexaSkillLinked
  }
}
    `;
export function useUnlinkAlexaMutation(baseOptions?: Apollo.MutationHookOptions<UnlinkAlexaMutation, UnlinkAlexaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UnlinkAlexaMutation, UnlinkAlexaMutationVariables>(UnlinkAlexaDocument, options);
      }
export type UnlinkAlexaMutationHookResult = ReturnType<typeof useUnlinkAlexaMutation>;
export const UnmarkUserForDeleteDocument = gql`
    mutation UnmarkUserForDelete($id: ID!) {
  unmarkUserForDeletion(id: $id) {
    id
    ... on Trainee {
      deleteAt
    }
    ... on Trainer {
      deleteAt
    }
  }
}
    `;
export function useUnmarkUserForDeleteMutation(baseOptions?: Apollo.MutationHookOptions<UnmarkUserForDeleteMutation, UnmarkUserForDeleteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UnmarkUserForDeleteMutation, UnmarkUserForDeleteMutationVariables>(UnmarkUserForDeleteDocument, options);
      }
export type UnmarkUserForDeleteMutationHookResult = ReturnType<typeof useUnmarkUserForDeleteMutation>;
export const UpdateEntryOrderDocument = gql`
    mutation updateEntryOrder($entryId: ID!, $dayId: ID!, $orderId: Int!) {
  updateEntryOrder(entryId: $entryId, dayId: $dayId, orderId: $orderId) {
    entry {
      id
      orderId
    }
    day {
      id
      entries {
        id
        orderId
      }
    }
    report {
      id
      days {
        id
        entries {
          id
          orderId
        }
      }
    }
  }
}
    `;
export function useUpdateEntryOrderMutation(baseOptions?: Apollo.MutationHookOptions<UpdateEntryOrderMutation, UpdateEntryOrderMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateEntryOrderMutation, UpdateEntryOrderMutationVariables>(UpdateEntryOrderDocument, options);
      }
export type UpdateEntryOrderMutationHookResult = ReturnType<typeof useUpdateEntryOrderMutation>;
export const UpdateEntryDocument = gql`
    mutation updateEntry($id: ID!, $input: EntryInput!) {
  updateEntry(id: $id, input: $input) {
    entry {
      id
      time
      text
    }
  }
}
    `;
export function useUpdateEntryMutation(baseOptions?: Apollo.MutationHookOptions<UpdateEntryMutation, UpdateEntryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateEntryMutation, UpdateEntryMutationVariables>(UpdateEntryDocument, options);
      }
export type UpdateEntryMutationHookResult = ReturnType<typeof useUpdateEntryMutation>;
export const UpdateReportReportReviewPageDocument = gql`
    mutation updateReportReportReviewPage($id: ID!, $summary: String, $department: String, $status: String) {
  updateReport(
    id: $id
    summary: $summary
    department: $department
    status: $status
  ) {
    report {
      id
      summary
      department
      status
    }
    trainee {
      id
      openReportsCount
    }
  }
}
    `;
export function useUpdateReportReportReviewPageMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReportReportReviewPageMutation, UpdateReportReportReviewPageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateReportReportReviewPageMutation, UpdateReportReportReviewPageMutationVariables>(UpdateReportReportReviewPageDocument, options);
      }
export type UpdateReportReportReviewPageMutationHookResult = ReturnType<typeof useUpdateReportReportReviewPageMutation>;
export const UpdateReportDocument = gql`
    mutation updateReport($id: ID!, $summary: String, $department: String, $status: String) {
  updateReport(
    id: $id
    summary: $summary
    department: $department
    status: $status
  ) {
    report {
      id
      summary
      department
      status
    }
  }
}
    `;
export function useUpdateReportMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReportMutation, UpdateReportMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateReportMutation, UpdateReportMutationVariables>(UpdateReportDocument, options);
      }
export type UpdateReportMutationHookResult = ReturnType<typeof useUpdateReportMutation>;
export const UpdateTraineeDocument = gql`
    mutation UpdateTrainee($input: UpdateTraineeInput!, $id: ID!) {
  updateTrainee(input: $input, id: $id) {
    id
    startDate
    startOfToolUsage
    endDate
    firstName
    lastName
    email
    avatar
    company {
      id
    }
  }
}
    `;
export function useUpdateTraineeMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTraineeMutation, UpdateTraineeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateTraineeMutation, UpdateTraineeMutationVariables>(UpdateTraineeDocument, options);
      }
export type UpdateTraineeMutationHookResult = ReturnType<typeof useUpdateTraineeMutation>;
export const UpdateTrainerDocument = gql`
    mutation UpdateTrainer($input: UpdateTrainerInput!, $id: ID!) {
  updateTrainer(input: $input, id: $id) {
    id
    firstName
    lastName
    email
    avatar
    type
  }
}
    `;
export function useUpdateTrainerMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTrainerMutation, UpdateTrainerMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateTrainerMutation, UpdateTrainerMutationVariables>(UpdateTrainerDocument, options);
      }
export type UpdateTrainerMutationHookResult = ReturnType<typeof useUpdateTrainerMutation>;
export const AdminTraineesPageDocument = gql`
    query AdminTraineesPage {
  trainees {
    id
    firstName
    lastName
    avatar
    deleteAt
  }
  companies {
    id
    name
  }
}
    `;
export function useAdminTraineesPageQuery(baseOptions?: Apollo.QueryHookOptions<AdminTraineesPageQuery, AdminTraineesPageQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminTraineesPageQuery, AdminTraineesPageQueryVariables>(AdminTraineesPageDocument, options);
      }
export function useAdminTraineesPageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminTraineesPageQuery, AdminTraineesPageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminTraineesPageQuery, AdminTraineesPageQueryVariables>(AdminTraineesPageDocument, options);
        }
export type AdminTraineesPageQueryHookResult = ReturnType<typeof useAdminTraineesPageQuery>;
export type AdminTraineesPageLazyQueryHookResult = ReturnType<typeof useAdminTraineesPageLazyQuery>;
export const AdminTrainersPageDocument = gql`
    query AdminTrainersPage {
  trainers {
    id
    firstName
    lastName
    avatar
    deleteAt
  }
}
    `;
export function useAdminTrainersPageQuery(baseOptions?: Apollo.QueryHookOptions<AdminTrainersPageQuery, AdminTrainersPageQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminTrainersPageQuery, AdminTrainersPageQueryVariables>(AdminTrainersPageDocument, options);
      }
export function useAdminTrainersPageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminTrainersPageQuery, AdminTrainersPageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminTrainersPageQuery, AdminTrainersPageQueryVariables>(AdminTrainersPageDocument, options);
        }
export type AdminTrainersPageQueryHookResult = ReturnType<typeof useAdminTrainersPageQuery>;
export type AdminTrainersPageLazyQueryHookResult = ReturnType<typeof useAdminTrainersPageLazyQuery>;
export const AlexaLinkingUrlDocument = gql`
    query alexaLinkingUrl {
  alexaLinkingUrl
}
    `;
export function useAlexaLinkingUrlQuery(baseOptions?: Apollo.QueryHookOptions<AlexaLinkingUrlQuery, AlexaLinkingUrlQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AlexaLinkingUrlQuery, AlexaLinkingUrlQueryVariables>(AlexaLinkingUrlDocument, options);
      }
export function useAlexaLinkingUrlLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AlexaLinkingUrlQuery, AlexaLinkingUrlQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AlexaLinkingUrlQuery, AlexaLinkingUrlQueryVariables>(AlexaLinkingUrlDocument, options);
        }
export type AlexaLinkingUrlQueryHookResult = ReturnType<typeof useAlexaLinkingUrlQuery>;
export type AlexaLinkingUrlLazyQueryHookResult = ReturnType<typeof useAlexaLinkingUrlLazyQuery>;
export const ArchivePageDataDocument = gql`
    query ArchivePageData {
  currentUser {
    id
    theme
    firstName
    lastName
    language
  }
  reports(statuses: [archived]) {
    id
    week
    year
    status
    department
    days {
      status
      entries {
        id
        time
      }
    }
    __typename
  }
}
    `;
export function useArchivePageDataQuery(baseOptions?: Apollo.QueryHookOptions<ArchivePageDataQuery, ArchivePageDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ArchivePageDataQuery, ArchivePageDataQueryVariables>(ArchivePageDataDocument, options);
      }
export function useArchivePageDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArchivePageDataQuery, ArchivePageDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ArchivePageDataQuery, ArchivePageDataQueryVariables>(ArchivePageDataDocument, options);
        }
export type ArchivePageDataQueryHookResult = ReturnType<typeof useArchivePageDataQuery>;
export type ArchivePageDataLazyQueryHookResult = ReturnType<typeof useArchivePageDataLazyQuery>;
export const CommentBoxDataDocument = gql`
    query CommentBoxData {
  currentUser {
    id
  }
}
    `;
export function useCommentBoxDataQuery(baseOptions?: Apollo.QueryHookOptions<CommentBoxDataQuery, CommentBoxDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CommentBoxDataQuery, CommentBoxDataQueryVariables>(CommentBoxDataDocument, options);
      }
export function useCommentBoxDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommentBoxDataQuery, CommentBoxDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CommentBoxDataQuery, CommentBoxDataQueryVariables>(CommentBoxDataDocument, options);
        }
export type CommentBoxDataQueryHookResult = ReturnType<typeof useCommentBoxDataQuery>;
export type CommentBoxDataLazyQueryHookResult = ReturnType<typeof useCommentBoxDataLazyQuery>;
export const ConfigDocument = gql`
    query Config {
  config {
    minWorkDayMinutes
    maxWorkDayMinutes
    expectedWorkDayMinutes
    minEducationDayMinutes
    maxEducationDayMinutes
    maxEntryMinutes
    maxPeriodYearsCount
    finishedWeekDayCount
  }
}
    `;
export function useConfigQuery(baseOptions?: Apollo.QueryHookOptions<ConfigQuery, ConfigQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ConfigQuery, ConfigQueryVariables>(ConfigDocument, options);
      }
export function useConfigLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ConfigQuery, ConfigQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ConfigQuery, ConfigQueryVariables>(ConfigDocument, options);
        }
export type ConfigQueryHookResult = ReturnType<typeof useConfigQuery>;
export type ConfigLazyQueryHookResult = ReturnType<typeof useConfigLazyQuery>;
export const CurrentUserDocument = gql`
    query CurrentUser {
  currentUser {
    id
    language
    theme
    type
    ... on Trainee {
      company {
        id
      }
      startDate
      endDate
      course
    }
    ... on Trainer {
      id
      trainees {
        id
      }
    }
  }
}
    `;
export function useCurrentUserQuery(baseOptions?: Apollo.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
      }
export function useCurrentUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
        }
export type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;
export type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>;
export const DashboardPageDataDocument = gql`
    query DashboardPageData($currentYear: Int!, $currentWeek: Int!) {
  currentUser {
    id
    theme
  }
  reports(statuses: [todo, reopened, review]) {
    id
    week
    year
    status
    department
    days {
      status
      entries {
        id
        time
      }
    }
    __typename
  }
  reportForYearAndWeek(year: $currentYear, week: $currentWeek) {
    id
    status
    days {
      status
      date
      id
      entries {
        id
        text
        time
        orderId
        comments {
          id
          user {
            id
            firstName
            lastName
            avatar
          }
        }
      }
      comments {
        id
        text
        user {
          id
          firstName
          lastName
          avatar
        }
      }
    }
  }
}
    `;
export function useDashboardPageDataQuery(baseOptions: Apollo.QueryHookOptions<DashboardPageDataQuery, DashboardPageDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DashboardPageDataQuery, DashboardPageDataQueryVariables>(DashboardPageDataDocument, options);
      }
export function useDashboardPageDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DashboardPageDataQuery, DashboardPageDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DashboardPageDataQuery, DashboardPageDataQueryVariables>(DashboardPageDataDocument, options);
        }
export type DashboardPageDataQueryHookResult = ReturnType<typeof useDashboardPageDataQuery>;
export type DashboardPageDataLazyQueryHookResult = ReturnType<typeof useDashboardPageDataLazyQuery>;
export const DayInputDataDocument = gql`
    query DayInputData {
  currentUser {
    id
    firstName
    lastName
    avatar
    type
  }
}
    `;
export function useDayInputDataQuery(baseOptions?: Apollo.QueryHookOptions<DayInputDataQuery, DayInputDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DayInputDataQuery, DayInputDataQueryVariables>(DayInputDataDocument, options);
      }
export function useDayInputDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DayInputDataQuery, DayInputDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DayInputDataQuery, DayInputDataQueryVariables>(DayInputDataDocument, options);
        }
export type DayInputDataQueryHookResult = ReturnType<typeof useDayInputDataQuery>;
export type DayInputDataLazyQueryHookResult = ReturnType<typeof useDayInputDataLazyQuery>;
export const EntryInputDataDocument = gql`
    query EntryInputData {
  currentUser {
    id
    type
    firstName
    lastName
    avatar
    username
  }
}
    `;
export function useEntryInputDataQuery(baseOptions?: Apollo.QueryHookOptions<EntryInputDataQuery, EntryInputDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<EntryInputDataQuery, EntryInputDataQueryVariables>(EntryInputDataDocument, options);
      }
export function useEntryInputDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<EntryInputDataQuery, EntryInputDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<EntryInputDataQuery, EntryInputDataQueryVariables>(EntryInputDataDocument, options);
        }
export type EntryInputDataQueryHookResult = ReturnType<typeof useEntryInputDataQuery>;
export type EntryInputDataLazyQueryHookResult = ReturnType<typeof useEntryInputDataLazyQuery>;
export const UserPageDocument = gql`
    query UserPage($id: ID!) {
  getUser(id: $id) {
    id
    avatar
    firstName
    lastName
    email
    type
    ... on Trainee {
      startDate
      startOfToolUsage
      endDate
      deleteAt
      course
      company {
        id
      }
      trainer {
        id
        firstName
        lastName
        avatar
      }
    }
    ... on Trainer {
      deleteAt
      trainees {
        id
        firstName
        lastName
        avatar
      }
    }
  }
  companies {
    id
    name
  }
}
    `;
export function useUserPageQuery(baseOptions: Apollo.QueryHookOptions<UserPageQuery, UserPageQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserPageQuery, UserPageQueryVariables>(UserPageDocument, options);
      }
export function useUserPageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserPageQuery, UserPageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserPageQuery, UserPageQueryVariables>(UserPageDocument, options);
        }
export type UserPageQueryHookResult = ReturnType<typeof useUserPageQuery>;
export type UserPageLazyQueryHookResult = ReturnType<typeof useUserPageLazyQuery>;
export const NavigationDataDocument = gql`
    query NavigationData {
  currentUser {
    __typename
    type
    id
    firstName
    lastName
    avatar
  }
}
    `;
export function useNavigationDataQuery(baseOptions?: Apollo.QueryHookOptions<NavigationDataQuery, NavigationDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<NavigationDataQuery, NavigationDataQueryVariables>(NavigationDataDocument, options);
      }
export function useNavigationDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<NavigationDataQuery, NavigationDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<NavigationDataQuery, NavigationDataQueryVariables>(NavigationDataDocument, options);
        }
export type NavigationDataQueryHookResult = ReturnType<typeof useNavigationDataQuery>;
export type NavigationDataLazyQueryHookResult = ReturnType<typeof useNavigationDataLazyQuery>;
export const OnboardingPageDataDocument = gql`
    query OnboardingPageData {
  currentUser {
    id
    firstName
  }
}
    `;
export function useOnboardingPageDataQuery(baseOptions?: Apollo.QueryHookOptions<OnboardingPageDataQuery, OnboardingPageDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OnboardingPageDataQuery, OnboardingPageDataQueryVariables>(OnboardingPageDataDocument, options);
      }
export function useOnboardingPageDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OnboardingPageDataQuery, OnboardingPageDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OnboardingPageDataQuery, OnboardingPageDataQueryVariables>(OnboardingPageDataDocument, options);
        }
export type OnboardingPageDataQueryHookResult = ReturnType<typeof useOnboardingPageDataQuery>;
export type OnboardingPageDataLazyQueryHookResult = ReturnType<typeof useOnboardingPageDataLazyQuery>;
export const PrintDataDocument = gql`
    query PrintData($ids: [ID!]!) {
  print(ids: $ids) {
    estimatedWaitingTime
  }
}
    `;
export function usePrintDataQuery(baseOptions: Apollo.QueryHookOptions<PrintDataQuery, PrintDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PrintDataQuery, PrintDataQueryVariables>(PrintDataDocument, options);
      }
export function usePrintDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PrintDataQuery, PrintDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PrintDataQuery, PrintDataQueryVariables>(PrintDataDocument, options);
        }
export type PrintDataQueryHookResult = ReturnType<typeof usePrintDataQuery>;
export type PrintDataLazyQueryHookResult = ReturnType<typeof usePrintDataLazyQuery>;
export const ReportPageDataDocument = gql`
    query ReportPageData($year: Int!, $week: Int!) {
  currentUser {
    ... on Trainee {
      startOfToolUsage
      endOfToolUsage
    }
    id
    firstName
    lastName
    avatar
    username
  }
  reportForYearAndWeek(year: $year, week: $week) {
    id
    week
    year
    summary
    department
    status
    previousReportLink
    nextReportLink
    comments {
      id
      text
      user {
        id
        firstName
        lastName
        avatar
      }
    }
    days {
      status
      date
      id
      comments {
        id
        text
        user {
          id
          firstName
          lastName
          avatar
        }
      }
      entries {
        id
        text
        time
        orderId
        comments {
          id
          text
          user {
            id
            firstName
            lastName
            avatar
          }
        }
      }
    }
  }
}
    `;
export function useReportPageDataQuery(baseOptions: Apollo.QueryHookOptions<ReportPageDataQuery, ReportPageDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ReportPageDataQuery, ReportPageDataQueryVariables>(ReportPageDataDocument, options);
      }
export function useReportPageDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReportPageDataQuery, ReportPageDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ReportPageDataQuery, ReportPageDataQueryVariables>(ReportPageDataDocument, options);
        }
export type ReportPageDataQueryHookResult = ReturnType<typeof useReportPageDataQuery>;
export type ReportPageDataLazyQueryHookResult = ReturnType<typeof useReportPageDataLazyQuery>;
export const ReportReviewPageDataDocument = gql`
    query reportReviewPageData($year: Int!, $week: Int!, $trainee: ID!) {
  currentUser {
    id
    firstName
    lastName
    avatar
    username
  }
  reportForTrainee(year: $year, week: $week, id: $trainee) {
    id
    week
    year
    summary
    department
    status
    comments {
      id
      text
      user {
        id
        firstName
        lastName
        avatar
      }
    }
    days {
      status
      date
      id
      entries {
        id
        text
        time
        orderId
        comments {
          id
          text
          user {
            id
            firstName
            lastName
            avatar
          }
        }
      }
      comments {
        id
        text
        user {
          id
          firstName
          lastName
          avatar
        }
      }
    }
  }
}
    `;
export function useReportReviewPageDataQuery(baseOptions: Apollo.QueryHookOptions<ReportReviewPageDataQuery, ReportReviewPageDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ReportReviewPageDataQuery, ReportReviewPageDataQueryVariables>(ReportReviewPageDataDocument, options);
      }
export function useReportReviewPageDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReportReviewPageDataQuery, ReportReviewPageDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ReportReviewPageDataQuery, ReportReviewPageDataQueryVariables>(ReportReviewPageDataDocument, options);
        }
export type ReportReviewPageDataQueryHookResult = ReturnType<typeof useReportReviewPageDataQuery>;
export type ReportReviewPageDataLazyQueryHookResult = ReturnType<typeof useReportReviewPageDataLazyQuery>;
export const SettingsPageDataDocument = gql`
    query SettingsPageData {
  currentUser {
    id
    type
    language
    theme
    notification
    ... on Trainee {
      company {
        id
        name
      }
      startDate
      endDate
      course
      alexaSkillLinked
    }
  }
  companies {
    id
    name
  }
}
    `;
export function useSettingsPageDataQuery(baseOptions?: Apollo.QueryHookOptions<SettingsPageDataQuery, SettingsPageDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SettingsPageDataQuery, SettingsPageDataQueryVariables>(SettingsPageDataDocument, options);
      }
export function useSettingsPageDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SettingsPageDataQuery, SettingsPageDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SettingsPageDataQuery, SettingsPageDataQueryVariables>(SettingsPageDataDocument, options);
        }
export type SettingsPageDataQueryHookResult = ReturnType<typeof useSettingsPageDataQuery>;
export type SettingsPageDataLazyQueryHookResult = ReturnType<typeof useSettingsPageDataLazyQuery>;
export const SignatureSettingsDataDocument = gql`
    query SignatureSettingsData {
  currentUser {
    id
    signature
  }
}
    `;
export function useSignatureSettingsDataQuery(baseOptions?: Apollo.QueryHookOptions<SignatureSettingsDataQuery, SignatureSettingsDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SignatureSettingsDataQuery, SignatureSettingsDataQueryVariables>(SignatureSettingsDataDocument, options);
      }
export function useSignatureSettingsDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SignatureSettingsDataQuery, SignatureSettingsDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SignatureSettingsDataQuery, SignatureSettingsDataQueryVariables>(SignatureSettingsDataDocument, options);
        }
export type SignatureSettingsDataQueryHookResult = ReturnType<typeof useSignatureSettingsDataQuery>;
export type SignatureSettingsDataLazyQueryHookResult = ReturnType<typeof useSignatureSettingsDataLazyQuery>;
export const SuggestionsDataDocument = gql`
    query SuggestionsData {
  suggestions
}
    `;
export function useSuggestionsDataQuery(baseOptions?: Apollo.QueryHookOptions<SuggestionsDataQuery, SuggestionsDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SuggestionsDataQuery, SuggestionsDataQueryVariables>(SuggestionsDataDocument, options);
      }
export function useSuggestionsDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SuggestionsDataQuery, SuggestionsDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SuggestionsDataQuery, SuggestionsDataQueryVariables>(SuggestionsDataDocument, options);
        }
export type SuggestionsDataQueryHookResult = ReturnType<typeof useSuggestionsDataQuery>;
export type SuggestionsDataLazyQueryHookResult = ReturnType<typeof useSuggestionsDataLazyQuery>;
export const TraineePageDataDocument = gql`
    query TraineePageData {
  trainees {
    id
    username
    firstName
    lastName
    course
    avatar
    startDate
    trainer {
      id
      firstName
      lastName
    }
    company {
      id
      name
    }
  }
  currentUser {
    id
  }
}
    `;
export function useTraineePageDataQuery(baseOptions?: Apollo.QueryHookOptions<TraineePageDataQuery, TraineePageDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TraineePageDataQuery, TraineePageDataQueryVariables>(TraineePageDataDocument, options);
      }
export function useTraineePageDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TraineePageDataQuery, TraineePageDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TraineePageDataQuery, TraineePageDataQueryVariables>(TraineePageDataDocument, options);
        }
export type TraineePageDataQueryHookResult = ReturnType<typeof useTraineePageDataQuery>;
export type TraineePageDataLazyQueryHookResult = ReturnType<typeof useTraineePageDataLazyQuery>;
export const TraineeSettingsDataDocument = gql`
    query TraineeSettingsData {
  currentUser {
    ... on Trainee {
      id
      company {
        id
        name
      }
      startDate
      endDate
      course
      __typename
      id
      trainer {
        firstName
        lastName
        avatar
      }
    }
  }
}
    `;
export function useTraineeSettingsDataQuery(baseOptions?: Apollo.QueryHookOptions<TraineeSettingsDataQuery, TraineeSettingsDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TraineeSettingsDataQuery, TraineeSettingsDataQueryVariables>(TraineeSettingsDataDocument, options);
      }
export function useTraineeSettingsDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TraineeSettingsDataQuery, TraineeSettingsDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TraineeSettingsDataQuery, TraineeSettingsDataQueryVariables>(TraineeSettingsDataDocument, options);
        }
export type TraineeSettingsDataQueryHookResult = ReturnType<typeof useTraineeSettingsDataQuery>;
export type TraineeSettingsDataLazyQueryHookResult = ReturnType<typeof useTraineeSettingsDataLazyQuery>;
export const TrainerReportsPageDataDocument = gql`
    query TrainerReportsPageData {
  currentUser {
    id
    theme
    ... on Trainer {
      trainees {
        username
        firstName
        lastName
        id
        avatar
        openReportsCount
        reports {
          days {
            status
          }
          id
          status
          week
          year
        }
      }
    }
  }
}
    `;
export function useTrainerReportsPageDataQuery(baseOptions?: Apollo.QueryHookOptions<TrainerReportsPageDataQuery, TrainerReportsPageDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TrainerReportsPageDataQuery, TrainerReportsPageDataQueryVariables>(TrainerReportsPageDataDocument, options);
      }
export function useTrainerReportsPageDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TrainerReportsPageDataQuery, TrainerReportsPageDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TrainerReportsPageDataQuery, TrainerReportsPageDataQueryVariables>(TrainerReportsPageDataDocument, options);
        }
export type TrainerReportsPageDataQueryHookResult = ReturnType<typeof useTrainerReportsPageDataQuery>;
export type TrainerReportsPageDataLazyQueryHookResult = ReturnType<typeof useTrainerReportsPageDataLazyQuery>;
export const TrainersPageDocument = gql`
    query TrainersPage {
  trainers {
    id
    firstName
    lastName
    avatar
  }
}
    `;
export function useTrainersPageQuery(baseOptions?: Apollo.QueryHookOptions<TrainersPageQuery, TrainersPageQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TrainersPageQuery, TrainersPageQueryVariables>(TrainersPageDocument, options);
      }
export function useTrainersPageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TrainersPageQuery, TrainersPageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TrainersPageQuery, TrainersPageQueryVariables>(TrainersPageDocument, options);
        }
export type TrainersPageQueryHookResult = ReturnType<typeof useTrainersPageQuery>;
export type TrainersPageLazyQueryHookResult = ReturnType<typeof useTrainersPageLazyQuery>;